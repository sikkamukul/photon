diff --git a/hmac_gen/Makefile b/hmac_gen/Makefile
new file mode 100644
index 0000000..e32035c
--- /dev/null
+++ b/hmac_gen/Makefile
@@ -0,0 +1,3 @@
+obj-m += hmac_generator.o
+hmac_generator-objs :=  drv_hmac_gen.o hmac_gen.o
+
diff --git a/hmac_gen/drv_hmac_gen.c b/hmac_gen/drv_hmac_gen.c
new file mode 100644
index 0000000..4cd3b32
--- /dev/null
+++ b/hmac_gen/drv_hmac_gen.c
@@ -0,0 +1,176 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <asm/uaccess.h>
+#include <crypto/hash.h>
+#include <crypto/aes.h>
+#include <crypto/algapi.h>
+#include <linux/crypto.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/err.h>
+#include <linux/crypto.h>
+#include <linux/ctype.h>
+#include <linux/vmalloc.h>
+#include <asm/byteorder.h>
+
+#include "hmac_gen_ioctl.h"
+#include "hmac_gen.h"
+
+static hmacgen_out_data *hmacgen_data;
+static int hmacgen_data_size = sizeof(*hmacgen_data);
+static struct class*  hmac_gen_class  = NULL;
+static struct device* hmac_gen_device = NULL;
+static int major_num;
+DEFINE_MUTEX(hmac_ioctl_lock);
+
+static int dev_open(struct inode *inod, struct file *fil)
+{
+        printk(KERN_INFO "%s device opened", DEVICE_NAME);
+        return 0;
+}
+
+static ssize_t dev_read(struct file *filep,char *buf,size_t len,loff_t *off)
+{
+	int ret = -EINVAL;
+
+	printk(KERN_INFO "Read device %s called", DEVICE_NAME);
+	ret = hmac_gen_hash(hmacgen_data);
+	if (ret) {
+		printk(KERN_ERR "Failed to generate hmac sha with error %d\n", ret);
+		return ret;
+	}
+	if (copy_to_user(buf, hmacgen_data->hash_output, hmacgen_data->olen)) {
+		printk(KERN_ERR "Failed to copy the hash output to user\n");
+		return -EFAULT;
+	}
+        return ret;
+}
+
+static ssize_t dev_write(struct file *flip,const char *buf,size_t len,loff_t *off)
+{
+        return -EINVAL;
+}
+
+static int dev_release(struct inode *inod,struct file *fil){
+        printk(KERN_INFO "KERN_ALERT device closed\n");
+        return 0;
+}
+
+static long hmac_gen_ioctl(struct file *f, unsigned int cmd, unsigned long arg)
+{
+	int ret = -EINVAL;
+	char key[KEY_SIZE];
+	char path[1024];
+	int algo = -1;
+	int klen = 0;
+
+	mutex_lock(&hmac_ioctl_lock);
+	switch(cmd) {
+		case IOCTL_SET_KEY:
+			if (copy_from_user(key, (char *) arg, sizeof(key))) {
+				printk(KERN_ERR "Failed to copy key from user\n");
+				ret = -ENOMEM;
+				break;
+			}
+			klen = strlen(key);
+			if (klen < 0 || klen > KEY_SIZE) {
+				printk(KERN_ERR "invalid key size: %d, valid range (0 to %d)\n", klen, KEY_SIZE);
+				ret = -EINVAL;
+				break;
+			}
+			ret = hmac_gen_set_key(key, klen);
+			break;
+		case IOCTL_SET_ALGO:
+			if (copy_from_user(&algo, (int *)arg, sizeof(algo))) {
+				printk(KERN_ERR "Failed to copy algo from user\n");
+				ret = -ENOMEM;
+				break;
+			}
+			ret = hmac_gen_set_algo(algo, hmacgen_data);
+			break;
+		case IOCTL_SET_FILEPATH:
+			if (copy_from_user(path, (char *)arg, sizeof(path))) {
+				printk(KERN_ERR "Failed to copy file path from user\n");
+				ret = -ENOMEM;
+				break;
+			}
+			ret = hmac_gen_set_filepath(path);
+			break;
+	}
+	mutex_unlock(&hmac_ioctl_lock);
+	return ret;
+}
+
+static struct file_operations fops=
+{
+        .read=dev_read,
+        .write=dev_write,
+        .open=dev_open,
+        .release=dev_release,
+        .unlocked_ioctl=hmac_gen_ioctl,
+};
+
+static int __init hmac_gen_init(void)
+{
+	int err;
+	printk(KERN_INFO "Entering HMAC gen\n");
+
+	printk(KERN_INFO "Calling register dev\n");
+	major_num = register_chrdev(0, DEVICE_NAME, &fops);
+	if (major_num < 0 ){
+		kfree(hmacgen_data);
+		printk(KERN_ALERT "device registration failed. %d\n", major_num);
+	}
+	printk(KERN_INFO "Device %s registration success with major number %d\n",DEVICE_NAME, major_num);
+
+	hmac_gen_class = class_create(THIS_MODULE, "hmac_gen");
+	if (IS_ERR(hmac_gen_class)) {
+		printk(KERN_ALERT "Failed to register device class \n");
+		err = PTR_ERR(hmac_gen_class);
+		goto error;
+	}
+	printk(KERN_INFO "hmac_gen: device class registered successfully \n");
+
+	hmac_gen_device = device_create(hmac_gen_class, NULL, MKDEV(major_num, 0), NULL, DEVICE_NAME);
+	if (IS_ERR(hmac_gen_device)) {
+		class_destroy(hmac_gen_class);
+		err = PTR_ERR(hmac_gen_device);
+		goto error;
+	}
+	printk(KERN_INFO "hmac_gen: device class created successfully \n");
+
+	hmacgen_data = devm_kzalloc(hmac_gen_device, hmacgen_data_size, GFP_KERNEL);
+	if (!hmacgen_data) {
+		printk(KERN_ERR "Failed to allocate memory for hmac gen data\n");
+		err = -ENOMEM;
+		goto error;
+	}
+
+	err = hmac_gen_crypto_module_init(hmac_gen_device);
+	if (err) {
+		printk(KERN_ERR "Failed to initialize hmac gen crypto module\n");
+		goto error;
+	}
+
+	return err;
+error:
+	unregister_chrdev(major_num, DEVICE_NAME);
+	return err;
+}
+
+static void __exit hmac_gen_exit(void)
+{
+	printk(KERN_INFO "Leaving HMAC gen\n");
+	device_destroy(hmac_gen_class, MKDEV(major_num, 0));
+	class_unregister(hmac_gen_class);
+	class_destroy(hmac_gen_class);
+	unregister_chrdev(major_num, DEVICE_NAME);
+}
+
+module_init(hmac_gen_init);
+module_exit(hmac_gen_exit);
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("VMware Photon OS : Keerthana K <keerthanak@vmware.com>");
diff --git a/hmac_gen/hmac_gen.c b/hmac_gen/hmac_gen.c
new file mode 100644
index 0000000..7789aa0
--- /dev/null
+++ b/hmac_gen/hmac_gen.c
@@ -0,0 +1,266 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <asm/uaccess.h>
+#include <crypto/hash.h>
+#include <crypto/algapi.h>
+#include <linux/crypto.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/err.h>
+#include <linux/crypto.h>
+#include <linux/ctype.h>
+#include <linux/vmalloc.h>
+#include <linux/namei.h>
+#include <asm/byteorder.h>
+#include <linux/scatterlist.h>
+#include <crypto/skcipher.h>
+
+#include "hmac_gen_ioctl.h"
+#include "hmac_gen.h"
+
+#define VECTOR_TYPE_SIZE 20
+#define DIGEST_SIZE 512
+#define TEXT_SIZE (64 * (1024))
+#define MAX_FILE_SIZE 256000000 //256 MB
+
+typedef struct crypto_vector {
+	unsigned int algo;
+	unsigned int mask;
+	char vector_type[VECTOR_TYPE_SIZE];
+	int mode; //Encrypt=1 /Decrypt=2
+	int count;
+	int klen;
+	int data_tot_len;
+	int iv_len;
+	int rlen;
+	int olen;
+	unsigned char filepath[1024];
+	unsigned char key[KEY_SIZE];
+	unsigned char *iv;
+	unsigned char *hash_input;
+	unsigned char *hash_output;
+	struct scatterlist *sgin;
+} crypto_vector_t;
+
+struct ft_crypt_result {
+	struct completion completion;
+	int err;
+};
+crypto_vector_t *crypto_data;
+static DEFINE_MUTEX(hmacgen_crypto_lock);
+
+static void ft_crypt_complete(struct crypto_async_request *req, int err)
+{
+	struct ft_crypt_result *res = req->data;
+
+	printk(KERN_INFO "pbs: async\n");
+	if (err == -EINPROGRESS)
+		return;
+
+	res->err = err;
+	complete(&res->completion);
+}
+
+static void ft_result_init(struct ft_crypt_result *ft)
+{
+	memset(ft, 0, sizeof(*ft));
+	init_completion(&ft->completion);
+}
+
+int test_hash(crypto_vector_t *crypto_data)
+{
+	struct crypto_ahash *tfm = NULL;
+	struct ahash_request *req = NULL;
+	struct ft_crypt_result ft_result;
+	struct scatterlist sgin;
+	const char *algo;
+	int ret = -ENOMEM;
+
+	tfm = crypto_alloc_ahash(crypto_data->vector_type, crypto_data->algo, crypto_data-> mask);
+	if (IS_ERR(tfm)) {
+		printk(KERN_ERR "alg: cipher: Failed to load transform for "
+			"%s: %ld\n", "cbc(aes)", PTR_ERR(tfm));
+		return PTR_ERR(tfm);
+	}
+
+	algo = crypto_tfm_alg_driver_name(crypto_ahash_tfm(tfm));
+	if (algo) {
+		printk(KERN_INFO "Algo = %s\n", algo );
+	} else {
+		printk(KERN_ERR "driver not available\n");
+		ret =-EINVAL;
+		goto out;
+	}
+
+	crypto_ahash_clear_flags(tfm, ~0);
+	if (crypto_data->klen) {
+		ret = crypto_ahash_setkey(tfm, crypto_data->key, crypto_data->klen);
+		if (ret) {
+			printk(KERN_ERR "setting hash key err %d \n", ret);
+			goto out;
+		}
+	}
+
+	ft_result_init(&ft_result);
+	req = ahash_request_alloc(tfm, GFP_KERNEL);
+	if (!req) {
+		ret = -ENOMEM;
+		printk(KERN_ERR "hash request alloc error \n");
+		goto out;
+	}
+
+	ahash_request_set_tfm(req, tfm);
+	ahash_request_set_callback(req, CRYPTO_TFM_REQ_MAY_SLEEP |
+				CRYPTO_TFM_REQ_MAY_BACKLOG,
+				ft_crypt_complete, &ft_result);
+
+	sg_init_one(&sgin, crypto_data->hash_input, crypto_data->data_tot_len);
+
+	ahash_request_set_crypt(req, &sgin, crypto_data->hash_output, crypto_data->data_tot_len);
+
+	ret = crypto_ahash_digest(req);
+	if (ret == -EINPROGRESS || ret == -EBUSY) {
+		ret = wait_for_completion_interruptible_timeout(&ft_result.completion, 10*HZ);
+		if (!ret)
+			ret = ft_result.err;
+	}
+
+	/*crypto_ahash_update() */
+	ahash_request_free(req);
+out:
+	crypto_free_ahash(tfm);
+	return ret;
+}
+
+int hmac_gen_set_key(unsigned char text_key[KEY_SIZE], int klen)
+{
+
+	mutex_lock(&hmacgen_crypto_lock);
+	if (klen) {
+		strncpy(crypto_data->key, text_key, klen);;
+		crypto_data->klen = klen;
+	}
+	mutex_unlock(&hmacgen_crypto_lock);
+	return 0;
+}
+
+int hmac_gen_set_algo(int algo, hmacgen_out_data *hmacgen_data)
+{
+	int ret = 0;
+
+	mutex_lock(&hmacgen_crypto_lock);
+	crypto_data->algo = CRYPTO_ALG_TYPE_SHASH;
+	crypto_data->mask = 0;
+	switch (algo) {
+		case HMAC_SHA256:
+			strncpy(crypto_data->vector_type, "hmac(sha256)", strlen("hmac(sha256)"));
+			crypto_data->olen = 32;
+			hmacgen_data->olen = 32;
+			break;
+		case HMAC_SHA512:
+			strncpy(crypto_data->vector_type, "hmac(sha512)", strlen("hmac(sha512)"));
+			crypto_data->olen = 64;
+			hmacgen_data->olen = 64;
+			break;
+		default:
+			printk(KERN_ERR "hash algo not supported");
+			ret = -EINVAL;
+			break;
+	}
+
+	mutex_unlock(&hmacgen_crypto_lock);
+
+	return ret;
+}
+
+int hmac_gen_set_filepath(unsigned char path[])
+{
+	mutex_lock(&hmacgen_crypto_lock);
+	strncpy(crypto_data->filepath, path, strlen(path));
+	mutex_unlock(&hmacgen_crypto_lock);
+	return 0;
+}
+
+int hmac_gen_hash(hmacgen_out_data *hmacgen_data)
+{
+	int ret = 0;
+	enum kernel_read_file_id id = READING_MODULE;
+	void *buf;
+	loff_t size;
+	size_t msize = INT_MAX;
+	struct path path;
+	struct kstat stat;
+
+	mutex_lock(&hmacgen_crypto_lock);
+
+	if (strlen(crypto_data->filepath) == 0) {
+		printk(KERN_ERR "File path is not set properly\n");
+		ret = -EINVAL;
+		goto out;
+	}
+	if (strlen(crypto_data->key) == 0 || crypto_data->klen == 0) {
+		printk(KERN_ERR "Key is not set properly\n");
+		ret = -EINVAL;
+		goto out;
+	}
+	if (strncmp(crypto_data->vector_type, "hmac(sha256)", strlen("hmac(sha256)")) && strncmp(crypto_data->vector_type, "hmac(sha512)", strlen("hmac(sha512)"))) {
+		printk(KERN_ERR "HMAC strength is not set properly\n");
+		ret = -EINVAL;
+		goto out;
+	}
+	ret = kern_path(crypto_data->filepath, 0, &path);
+	if (ret) {
+		printk(KERN_ERR "kernel path error\n");
+		goto out;
+	}
+
+	ret = vfs_getattr(&path, &stat, STATX_SIZE, 0);
+	if (ret) {
+		printk(KERN_ERR "kernel Read file stats Error\n");
+		goto out;
+	}
+	printk(KERN_INFO "File Size = %lld\n", stat.size);
+
+	if (stat.size > MAX_FILE_SIZE) {
+		printk(KERN_ERR "File size exceeded\n");
+		ret = -EFBIG;
+		goto out;
+	}
+
+	ret = kernel_read_file_from_path(crypto_data->filepath, &buf, &size,
+					msize, id);
+	if (ret) {
+		printk(KERN_ERR "Loading %s failed with error %d\n", crypto_data->filepath, ret);
+		goto out;
+	}
+
+	crypto_data->hash_input = buf;
+	crypto_data->data_tot_len = size;
+	crypto_data->hash_output = hmacgen_data->hash_output;
+
+	ret = test_hash(crypto_data);
+	if (ret) {
+		printk(KERN_ERR "test_hash (%s) err %d\n", crypto_data->vector_type, ret);
+		goto out;
+	}
+	hmacgen_data->hash_output[hmacgen_data->olen] = '\0';
+
+out:
+	if (ret) {
+		memset(hmacgen_data, 0, sizeof(*hmacgen_data));
+	}
+	vfree(buf);
+	mutex_unlock(&hmacgen_crypto_lock);
+	return ret;
+}
+
+int hmac_gen_crypto_module_init(struct device* hmac_gen_device)
+{
+	crypto_data = devm_kzalloc(hmac_gen_device, sizeof (*crypto_data), GFP_KERNEL);
+	if (!crypto_data)
+		return -ENOMEM;
+	return 0;
+}
diff --git a/hmac_gen/hmac_gen.h b/hmac_gen/hmac_gen.h
new file mode 100644
index 0000000..0796cc5
--- /dev/null
+++ b/hmac_gen/hmac_gen.h
@@ -0,0 +1,5 @@
+int hmac_gen_crypto_module_init(struct device* hmac_gen_device);
+int hmac_gen_hash(hmacgen_out_data *user_data);
+int hmac_gen_set_key(unsigned char text_key[], int klen);
+int hmac_gen_set_algo(int algo, hmacgen_out_data *user_data);
+int hmac_gen_set_filepath(unsigned char path[]);
diff --git a/hmac_gen/hmac_gen_ioctl.h b/hmac_gen/hmac_gen_ioctl.h
new file mode 100644
index 0000000..aead48c
--- /dev/null
+++ b/hmac_gen/hmac_gen_ioctl.h
@@ -0,0 +1,21 @@
+#include <linux/ioctl.h>
+#define DEVICE_NAME "hmac_gen"
+#define MAGIC_NUM 91
+#define KEY_SIZE 256
+#define HMAC_MAX_OUT_LEN 64
+
+// Crypto Algo Types
+enum {
+	HMAC_SHA256 = 1,
+	HMAC_SHA512
+};
+
+typedef struct out_data {
+	int olen;
+	unsigned char hash_output[HMAC_MAX_OUT_LEN];
+}hmacgen_out_data;
+
+#define IOCTL_SET_KEY _IOW(MAGIC_NUM, 1, char *)
+#define IOCTL_SET_ALGO _IOW(MAGIC_NUM, 2, int *)
+#define IOCTL_SET_FILEPATH _IOW(MAGIC_NUM, 3, char *)
+
