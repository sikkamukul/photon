From 1b86d0a289798b94294864b5496e0b2b8ddf7281 Mon Sep 17 00:00:00 2001
From: Alexey Makhalov <amakhalov@vmware.com>
Date: Mon, 27 Sep 2021 12:08:29 -0700
Subject: [PATCH] initramfs: large files support for newca format

ASCII cpio format (070701/070702) header uses 32bit field to store the
size of the file. It limits maximum file size incide cpio to 4GB.
NEWCA format (0707ca) inherited the same limitation.

There is a last field in ascii cpio header - checksum. It is used
only in 070702 (newc with checksum). This field is not used and always
zero in 070701 and 0707ca.

Checksum field can be used in NEWCA format to store high 4 bytes of the
filesize. No header change required. This will support previously
created images.

Extra: NEWCA improvement - zero size files might not have empty
alignment page. It will make initrd images even smaller if there are
many empty files.

Signed-off-by: Alexey Makhalov <amakhalov@vmware.com>
Signed-off-by: Bo Gan <ganb@vmware.com>
---
 init/initramfs.c | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/init/initramfs.c b/init/initramfs.c
index 7beaaf9149bd..c18868604298 100644
--- a/init/initramfs.c
+++ b/init/initramfs.c
@@ -259,6 +259,8 @@ static void __init parse_header(char *s)
 	rdev = new_encode_dev(MKDEV(parsed[9], parsed[10]));
 	name_len = parsed[11];
 	hdr_csum = parsed[12];
+	if (page_aligned_fmt)
+		body_len |= parsed[12] << 32;
 }
 
 /* FSM */
@@ -234,7 +236,7 @@ static __initdata char *victim;
 static unsigned long byte_count __initdata;
 static __initdata loff_t this_header, next_header;
 
-static inline void __init eat(unsigned n)
+static inline void __init eat(unsigned long n)
 {
 	victim += n;
 	this_header += n;
@@ -299,8 +301,14 @@ static int __init do_header(void)
 	}
 	parse_header(collected);
 	next_header = this_header + N_ALIGN(name_len);
+	/*
+	 * If regular file has 0 size, old cpio tool will include empty
+	 * alignment page but new cpio tool does not do that and puts
+	 * next header right after. Handle both cases here. */
 	if (page_aligned_fmt && S_ISREG(mode))
-		next_header = PAGE_ALIGN(next_header);
+		if (body_len || (body_len == 0 &&
+		    memcmp(collected + N_ALIGN(name_len), "\0\0\0\0", 4) == 0))
+			next_header = PAGE_ALIGN(next_header);
 	next_header += body_len;
 	next_header = (next_header + 3) & ~3;
 	state = SkipIt;
-- 
2.11.0

