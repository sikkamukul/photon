From 1441e406fabe396aab8355cef50a9c834ecb7688 Mon Sep 17 00:00:00 2001
From: Alexey Makhalov <amakhalov@vmware.com>
Date: Tue, 29 Sep 2015 15:55:49 -0700
Subject: [PATCH] pci/probe.c: Hardcodded pci probe.

PCI probing takes a long time to scan resources for all devices
on PCI bus. Idea of this patch is to hardcode known resources
for known devices. In VMware hypervisor we do not have much
virtual PCI devices.

is_known_device() has list of known devices and available
resources (BARs) for them.

Added pci=scan_all cmdline parameter verifies hardcodded pci
values at runtime.

Signed-off-by: Alexey Makhalov <amakhalov@vmware.com>
Signed-off-by: Vikash Bansal <bvikas@vmware.com>

---
 drivers/pci/pci.c   |   2 +
 drivers/pci/pci.h   |   2 +
 drivers/pci/probe.c | 390 +++++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 390 insertions(+), 4 deletions(-)

diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index 57a87a001..64bfcb373 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -6176,6 +6176,8 @@ static int __init pci_setup(char *str)
 				pci_add_flags(PCI_SCAN_ALL_PCIE_DEVS);
 			} else if (!strncmp(str, "disable_acs_redir=", 18)) {
 				disable_acs_redir_param = str + 18;
+			} else if (!strncmp(str, "scan_all", 8)) {
+				pci_scan_all();
 			} else {
 				pr_err("PCI: Unknown option `%s'\n", str);
 			}
diff --git a/drivers/pci/pci.h b/drivers/pci/pci.h
index e9ede82ee..fc54123ce 100644
--- a/drivers/pci/pci.h
+++ b/drivers/pci/pci.h
@@ -149,6 +149,8 @@ void pci_no_msi(void);
 static inline void pci_no_msi(void) { }
 #endif
 
+void pci_scan_all(void);
+
 static inline void pci_msi_set_enable(struct pci_dev *dev, int enable)
 {
 	u16 control;
diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index fa4c386c8..8d475fdb8 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -30,6 +30,148 @@ static struct resource busn_resource = {
 	.flags	= IORESOURCE_BUS,
 };
 
+
+/**
+ *pci_dev_bar_info : Representation of BARs for PCI device
+ *@vid: Vendor ID of PCI device
+ *@pid: Product ID of PCI device
+ *@bars: Numbers of bars to be read for PCI device
+ *@sz[11]: Known Values of Bars and ROM
+ *        sz[0]--sz[6] is for offset 0x10 to 0x24
+ *	 sz[8] is for ROM offset 0x30
+ *	 sz[10] is reserved, but this is read for some devices
+ *	 sz[i] = 0: no BAR at this position.
+ *        sz[i] = 0xffffffff: BAR has to be scanned, applicable for variable
+ *                size BAR (such as video memory).
+ *        any other value: size in PCI BAR format.
+ */
+
+typedef struct {
+	u32 vid;
+	u32 pid;
+	u8  bars;
+	u32 sz[11];
+} pci_dev_bar_info;
+
+/*List of LSI Logic devices*/
+pci_dev_bar_info lsi_devs[]  = {
+	{0x1000, 0x0030,   /*53c1030 PCI-X Fusion-MPT Dual Ultra320 SCSI*/
+	4,         /*Number of bars*/
+	{0xff01, 0xfffe0004, 0, 0xfffe0004, 0, 0,  /*Bars*/
+	 0, 0, 0xffffc000, 0, 0} }, /*Rom + Extra*/
+
+	{0x1000, 0x0054,   /*LSI Logic : SAS1068 PCI-X Fusion-MPT SAS*/
+	4,         /*Number of bars*/
+	{0xff01, 0xffffc004, 0, 0xffff0004, 0, 0, /*Bars*/
+	 0, 0, 0xffffc000, 0, 0} }, /*Rom + Extra*/
+
+	{0, 0,   /*END of array marker*/
+	0,         /*Number of bars*/
+	{0, 0, 0, 0, 0, 0, 0, 0, 0} }
+};
+
+/*List of Intel Devices*/
+pci_dev_bar_info intel_devs[]  = {
+	{0x8086, 0x7110,   /*ISA bridge: 82371AB/EB/MB PIIX4 ISA*/
+	0,         /*Number of bars*/
+	{0, 0, 0, 0, 0, 0,        /*Bars*/
+	0, 0, 0, 0, 0} }, /*Rom + Extra*/
+
+	{0x8086, 0x7111,   /*IDE interface: 82371AB/EB/MB PIIX4 IDE*/
+	5,         /*Number of bars*/
+	{0, 0, 0, 0, 0xfffffff1, 0,        /*Bars*/
+	0, 0, 0, 0, 0} }, /*Rom + Extra*/
+
+	{0x8086, 0x7113,   /*Bridge: 82371AB/EB/MB PIIX4 ACPI*/
+	0,         /*Number of bars*/
+	{0, 0, 0, 0, 0, 0,                 /*Bars*/
+	0, 0, 0, 0, 0} },                    /*Rom + Extra*/
+
+	{0x8086, 0x7190,   /*Bridge: 82443BX/ZX/DX Host bridge*/
+	0,         /*Number of bars*/
+	{0, 0, 0, 0, 0, 0,                 /*Bars*/
+	0, 0, 0, 0, 0} },                   /*Rom + Extra*/
+
+	{0x8086, 0x7191,   /*PCI Bridge: Intel 440BX/ZX/DX - 82443BX/ZX/DX AGP*/
+	0,         /*Number of bars*/
+	{0, 0, 0, 0, 0, 0,                 /*Bars*/
+	0, 0, 0, 0, 0} },                   /*Rom + Extra*/
+
+	{0x8086, 0x10d3,   /*Eth controller[e1000e]: Intel 82574L Gigabit NIC*/
+	4,         /*Number of bars*/
+	{0xfffe0000, 0xfffe0000, 0xffffffe1, 0xffffc000, 0, 0, /*Bars*/
+	0, 0, 0xffff0000, 0, 0} },          /*Rom + Extra*/
+
+	{0x8086, 0x100f,   /*Eth controller[e1000]: Intel 82545EM Gigabit NIC*/
+	5,         /*Number of bars*/
+	{0xfffe0004, 0, 0xffff0004, 0, 0xffffffc1, 0, /*Bars*/
+	0, 0, 0xffff0000, 0, 0} },         /*Rom + Extra*/
+
+	{0, 0,   /*END of array marker*/
+	0,         /*Number of bars*/
+	{0, 0, 0, 0, 0, 0, 0, 0, 0} }
+};
+
+/*List of VmWare Devices*/
+pci_dev_bar_info vmw_devs[]  = {
+	{0x15ad, 0x0405,   /*VMware SVGA II Adapter*/
+	3,         /*Number of bars*/
+	{0xfffffff1, 0xffffffff, 0xff800000, 0, 0, 0, /*Bars*/
+	0, 0, 0xffff8000, 0, 0} },          /*Rom + Extra*/
+
+	{0x15ad, 0x0740,   /*VMware Virtual Machine Communication Interface*/
+	2,         /*Number of bars*/
+	{0xffffffc1, 0xffffe004, 0, 0, 0, 0,
+	0, 0, 0, 0, 0} },
+
+	{0x15ad, 0x0790,   /*VMware PCI bridge*/
+	0,         /*Number of bars*/
+	{0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0} },
+
+	{0x15ad, 0x07a0,   /*VMware PCI Express Root Port*/
+	0,         /*Number of bars*/
+	{0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0} },
+
+	{0x15ad, 0x07b0,   /*VMware VMXNET3 Ethernet Controller*/
+	4,         /*Number of bars*/
+	{0xffffffff, 0xfffff000, 0xffffe000, 0xfffffff1, 0, 0, /*Bars*/
+	0, 0, 0xffff0000, 0, 0} },           /*Rom + Extra*/
+
+	{0x15ad, 0x07c0,   /*VMware PVSCSI SCSI Controller*/
+	2,         /*Number of bars*/
+	{0xfffffff9, 0xffff8004, 0, 0, 0, 0, /*Bars*/
+	0, 0, 0xffff0000, 0, 0} },             /*Rom + Extra*/
+
+	{0x15ad, 0x07e0,   /*VMware SATA AHCI controller*/
+	6,         /*Number of bars*/
+	{0, 0, 0, 0, 0, 0xfffff000,        /*Bars*/
+	0, 0, 0xffff0000, 0, 0} },          /*Rom + Extra*/
+
+	{0x15ad, 0x0770,   /*VMware USB2 EHCI Controller*/
+	1,         /*Number of bars*/
+	{0xfffff000, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0} },
+
+	{0x15ad, 0x0774,   /*VMware USB1.1 UHCI Controller*/
+	5,         /*Number of bars*/
+	{0, 0, 0, 0, 0xffffffe1, 0,
+	0, 0, 0, 0, 0} },
+
+	{0x15ad, 0x0779,   /*VMware USB3 xHCI 1.0 Controller*/
+	1,         /*Number of bars*/
+	{0xfffe0004, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0} },
+
+	{0, 0,   /*END of array marker*/
+	0,         /*Number of bars*/
+	{0, 0, 0, 0, 0, 0, 0, 0, 0} }
+};
+
+
+pci_dev_bar_info *vendors_table[] = {lsi_devs, vmw_devs, intel_devs, NULL};
+
 /* Ugh.  Need to stop exporting this to modules. */
 LIST_HEAD(pci_root_buses);
 EXPORT_SYMBOL(pci_root_buses);
@@ -168,6 +310,213 @@ static inline unsigned long decode_bar(struct pci_dev *dev, u32 bar)
 
 #define PCI_COMMAND_DECODE_ENABLE	(PCI_COMMAND_MEMORY | PCI_COMMAND_IO)
 
+static int pci_scan_and_verify;
+
+void pci_scan_all(void)
+{
+	pci_scan_and_verify = 1;
+}
+
+/* shortcut version of __pci_read_base where we know the sizes already */
+int __pci_read_base_shortcut(struct pci_dev *dev, enum pci_bar_type type,
+		    struct resource *res, unsigned int pos, u32 sz_in, u32 sz2_in)
+{
+	u32 l = 0, sz = 0;
+	u64 l64, sz64, mask64;
+	struct pci_bus_region region, inverted_region;
+
+	res->name = pci_name(dev);
+
+	pci_read_config_dword(dev, pos, &l);
+
+	sz = sz_in;
+
+	/*
+	 * All bits set in sz means the device isn't working properly.
+	 * If the BAR isn't implemented, all bits must be 0.  If it's a
+	 * memory BAR or a ROM, bit 0 must be clear; if it's an io BAR, bit
+	 * 1 must be clear.
+	 * Here we set the size and is not 0xffffffff
+	 */
+
+	/*
+	 * I don't know how l can have all bits set.  Copied from old code.
+	 * Maybe it fixes a bug on some ancient platform.
+	 */
+	if (l == 0xffffffff)
+		l = 0;
+
+	if (type == pci_bar_unknown) {
+		res->flags = decode_bar(dev, l);
+		res->flags |= IORESOURCE_SIZEALIGN;
+		if (res->flags & IORESOURCE_IO) {
+			l64 = l & PCI_BASE_ADDRESS_IO_MASK;
+			sz64 = sz & PCI_BASE_ADDRESS_IO_MASK;
+			mask64 = PCI_BASE_ADDRESS_IO_MASK & (u32)IO_SPACE_LIMIT;
+		} else {
+			l64 = l & PCI_BASE_ADDRESS_MEM_MASK;
+			sz64 = sz & PCI_BASE_ADDRESS_MEM_MASK;
+			mask64 = (u32)PCI_BASE_ADDRESS_MEM_MASK;
+		}
+	} else {
+		if (l & PCI_ROM_ADDRESS_ENABLE)
+			res->flags |= IORESOURCE_ROM_ENABLE;
+		l64 = l & PCI_ROM_ADDRESS_MASK;
+		sz64 = sz & PCI_ROM_ADDRESS_MASK;
+		mask64 = PCI_ROM_ADDRESS_MASK;
+	}
+
+	if (res->flags & IORESOURCE_MEM_64) {
+		pci_read_config_dword(dev, pos + 4, &l);
+		sz = sz2_in;
+
+		l64 |= ((u64)l << 32);
+		sz64 |= ((u64)sz << 32);
+		mask64 |= ((u64)~0 << 32);
+	}
+
+	if (!sz64)
+		goto fail;
+
+	sz64 = pci_size(l64, sz64, mask64);
+	if (!sz64) {
+		dev_info(&dev->dev, FW_BUG "reg 0x%x: invalid BAR (can't size)\n",
+			 pos);
+		goto fail;
+	}
+
+	if (res->flags & IORESOURCE_MEM_64) {
+		if ((sizeof(pci_bus_addr_t) < 8 || sizeof(resource_size_t) < 8) &&
+		    sz64 > 0x100000000ULL) {
+			res->flags |= IORESOURCE_UNSET | IORESOURCE_DISABLED;
+			res->start = 0;
+			res->end = 0;
+			dev_err(&dev->dev, "reg 0x%x: can't handle BAR larger than 4GB (size %#010llx)\n",
+				pos, (unsigned long long)sz64);
+			goto out;
+		}
+
+		if ((sizeof(pci_bus_addr_t) < 8) && l) {
+			/* Above 32-bit boundary; try to reallocate */
+			res->flags |= IORESOURCE_UNSET;
+			res->start = 0;
+			res->end = sz64 - 1;
+			dev_info(&dev->dev, "reg 0x%x: can't handle BAR above 4GB (bus address %#010llx)\n",
+				 pos, (unsigned long long)l64);
+			goto out;
+		}
+	}
+
+	region.start = l64;
+	region.end = l64 + sz64 - 1;
+
+	pcibios_bus_to_resource(dev->bus, res, &region);
+	pcibios_resource_to_bus(dev->bus, &inverted_region, res);
+
+	/*
+	 * If "A" is a BAR value (a bus address), "bus_to_resource(A)" is
+	 * the corresponding resource address (the physical address used by
+	 * the CPU.  Converting that resource address back to a bus address
+	 * should yield the original BAR value:
+	 *
+	 *     resource_to_bus(bus_to_resource(A)) == A
+	 *
+	 * If it doesn't, CPU accesses to "bus_to_resource(A)" will not
+	 * be claimed by the device.
+	 */
+	if (inverted_region.start != region.start) {
+		res->flags |= IORESOURCE_UNSET;
+		res->start = 0;
+		res->end = region.end - region.start;
+		dev_info(&dev->dev, "reg 0x%x: initial BAR value %#010llx invalid\n",
+			 pos, (unsigned long long)region.start);
+	}
+
+	goto out;
+
+
+fail:
+	res->flags = 0;
+out:
+	if (res->flags)
+		dev_printk(KERN_DEBUG, &dev->dev, "reg 0x%x: %pR\n", pos, res);
+
+	return (res->flags & IORESOURCE_MEM_64) ? 1 : 0;
+}
+
+#define REQUEST_BARS_INFO	BIT(8)
+
+/**
+ * is_known_device - Provide data for known PCI device
+ * @dev: the PCI device
+ * @req: type of request. Possible values are:
+ *	  - pos (8 bits): request of the size of BAR at specified BAR
+ *	    position in lower 8 bits. Other bits are zeroed.
+ *          There are 3 types of sizes:
+ *	     - 0: no BAR at this position.
+ *           - 0xffffffff: BAR has to be scanned, applicable for variable
+ *	       size BAR (such as video memory).
+ *	     - (value): size in PCI BAR format.
+ *	  - REQUEST_BARS_INFO - request for total number of BARs and
+ *	    ROM presence.
+ * @val: (out) double meaning depending on @req. If @req is:
+ *	  - pos (8 bits), returns size of BAR at specified position for
+ *	    known device or 0xffffffff for unknown one.
+ *	  - REQUEST_BARS_INFO, returns number of BARs for known device or
+ *	    6 (maximum namber of BARs in config space) for unknown one.
+ * @rom: (in/out) it will be set to zero if ROM is not present for known
+ *	 device or will be kept as is otherwise.
+ *
+ * Returns 1 if device is known, 0 if not.
+ */
+static int is_known_device(struct pci_dev *dev, int req, int *val, int *rom)
+{
+	int vid = dev->vendor;
+	int pid = dev->device;
+	pci_dev_bar_info *pdev = NULL;
+	pci_dev_bar_info *table;
+	int i, j;
+	int req_index;
+
+	for (i = 0; vendors_table[i]; i++) {
+		if (vendors_table[i]->vid != vid) {
+			continue;
+		}
+		table = vendors_table[i];
+		for (j = 0; table[j].pid != 0; j++) {
+			if (table[j].pid == pid) {
+				pdev = &table[j];
+				goto loop_out;
+			}
+		}
+		break; /*Matched table for vendor not having dev, so break*/
+	}
+
+loop_out:
+	if (pdev) {
+		if (req == REQUEST_BARS_INFO) {
+			*val = pdev->bars;
+			if (!pdev->sz[8]) {
+				*rom = 0;
+				return 1;
+			}
+		}
+		req_index = (req - PCI_BASE_ADDRESS_0) >> 2;
+		if (req_index <= 10) {
+			*val = pdev->sz[req_index];
+			if (*val == 0xffffffff)
+				return 0;
+			return 1;
+		}
+	}
+
+	if (req == REQUEST_BARS_INFO)
+		*val = 6;
+	else
+		*val = 0xffffffff;
+	return 0;
+}
+
 /**
  * pci_read_base - Read a PCI BAR
  * @dev: the PCI device
@@ -180,13 +529,20 @@ static inline unsigned long decode_bar(struct pci_dev *dev, u32 bar)
 int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 		    struct resource *res, unsigned int pos)
 {
-	u32 l = 0, sz = 0, mask;
+	u32 l = 0, sz = 0, known_sz, mask;
 	u64 l64, sz64, mask64;
 	u16 orig_cmd;
 	struct pci_bus_region region, inverted_region;
 
 	mask = type ? PCI_ROM_ADDRESS_MASK : ~0;
 
+	if (is_known_device(dev, pos, &known_sz, NULL) && !pci_scan_and_verify)
+		return __pci_read_base_shortcut(dev, type, res, pos, known_sz, 0);
+
+	res->name = pci_name(dev);
+
+	pci_dbg(dev, "Starting probe for %s %x:%x:%x\n", res->name, dev->vendor, dev->device, pos);
+
 	/* No printks while decoding is disabled! */
 	if (!dev->mmio_always_on) {
 		pci_read_config_word(dev, PCI_COMMAND, &orig_cmd);
@@ -196,7 +552,6 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 		}
 	}
 
-	res->name = pci_name(dev);
 
 	pci_read_config_dword(dev, pos, &l);
 	pci_write_config_dword(dev, pos, l | mask);
@@ -212,6 +567,11 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 	if (sz == 0xffffffff)
 		sz = 0;
 
+	if (pci_scan_and_verify && known_sz != 0xffffffff && known_sz != sz)
+		dev_err(&dev->dev,
+			"wrong known bar size: %x != %x\n",
+			known_sz, sz);
+
 	/*
 	 * I don't know how l can have all bits set.  Copied from old code.
 	 * Maybe it fixes a bug on some ancient platform.
@@ -316,8 +676,22 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 fail:
 	res->flags = 0;
 out:
-	if (res->flags)
+	if (res->flags) {
 		pci_info(dev, "reg 0x%x: %pR\n", pos, res);
+		if (pci_scan_and_verify) {
+			int bar = (pos - PCI_BASE_ADDRESS_0) >> 2;
+			int known_bars;
+			int known_rom = 1;
+			is_known_device(dev, REQUEST_BARS_INFO, &known_bars,
+					&known_rom);
+			if (bar < 6 && bar >= known_bars)
+				dev_err(&dev->dev,
+					"wrong known bars count %d\n",
+					known_bars);
+			if (pos == PCI_ROM_ADDRESS && !known_rom)
+				dev_err(&dev->dev, "wrong known rom value\n");
+		}
+	}
 
 	return (res->flags & IORESOURCE_MEM_64) ? 1 : 0;
 }
@@ -1651,7 +2025,15 @@ int pci_setup_device(struct pci_dev *dev)
 		if (class == PCI_CLASS_BRIDGE_PCI)
 			goto bad;
 		pci_read_irq(dev);
-		pci_read_bases(dev, 6, PCI_ROM_ADDRESS);
+
+		if (pci_scan_and_verify)
+			pci_read_bases(dev, 6, PCI_ROM_ADDRESS);
+		else {
+			int bars;
+			int rom = PCI_ROM_ADDRESS;
+			is_known_device(dev, REQUEST_BARS_INFO, &bars, &rom);
+			pci_read_bases(dev, bars, rom);
+		}
 
 		pci_subsystem_ids(dev, &dev->subsystem_vendor, &dev->subsystem_device);
 
-- 
2.17.1

