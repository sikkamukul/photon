From 23c63f7be47b88a67766b612556f36d7a76fcc0c Mon Sep 17 00:00:00 2001
From: Chuck Lever <chuck.lever@oracle.com>
Date: Mon, 12 Dec 2022 03:24:01 -0600
Subject: [PATCH 2/4] NFSD: Protect against send buffer overflow in NFSv3
 READDIR

commit 640f87c190e0d1b2a0fcb2ecf6d2cd53b1c41991 upstream.

Since before the git era, NFSD has conserved the number of pages
held by each nfsd thread by combining the RPC receive and send
buffers into a single array of pages. This works because there are
no cases where an operation needs a large RPC Call message and a
large RPC Reply message at the same time.

Once an RPC Call has been received, svc_process() updates
svc_rqst::rq_res to describe the part of rq_pages that can be
used for constructing the Reply. This means that the send buffer
(rq_res) shrinks when the received RPC record containing the RPC
Call is large.

A client can force this shrinkage on TCP by sending a correctly-
formed RPC Call header contained in an RPC record that is
excessively large. The full maximum payload size cannot be
constructed in that case.

Thanks to Aleksi Illikainen and Kari Hulkko for uncovering this
issue.

Reported-by: Ben Ronallo <Benjamin.Ronallo@synopsys.com>
Cc: <stable@vger.kernel.org>
Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
Reviewed-by: Jeff Layton <jlayton@kernel.org>
Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
[Fix ported to applicable methods (readdir, readdirplus).
Limit argp->count to the min of rq_res, max_payload() - vbrahmajosyula]
Signed-off-by: Vamsi Krishna Brahmajosyula <vbrahmajosyula@vmware.com>
---
 fs/nfsd/nfs3proc.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/fs/nfsd/nfs3proc.c b/fs/nfsd/nfs3proc.c
index 981a4e4c9..e87f57c5c 100644
--- a/fs/nfsd/nfs3proc.c
+++ b/fs/nfsd/nfs3proc.c
@@ -442,6 +442,9 @@ nfsd3_proc_readdir(struct svc_rqst *rqstp)
 				SVCFH_fmt(&argp->fh),
 				argp->count, (u32) argp->cookie);
 
+	argp->count = min_t(unsigned int, argp->count, svc_max_payload(rqstp));
+	argp->count = min_t(unsigned int, argp->count, rqstp->rq_res.buflen);
+
 	/* Make sure we've room for the NULL ptr & eof flag, and shrink to
 	 * client read size */
 	count = (argp->count >> 2) - 2;
@@ -503,6 +506,9 @@ nfsd3_proc_readdirplus(struct svc_rqst *rqstp)
 				SVCFH_fmt(&argp->fh),
 				argp->count, (u32) argp->cookie);
 
+	argp->count = min_t(unsigned int, argp->count, svc_max_payload(rqstp));
+	argp->count = min_t(unsigned int, argp->count, rqstp->rq_res.buflen);
+
 	/* Convert byte count to number of words (i.e. >> 2),
 	 * and reserve room for the NULL ptr & eof flag (-2 words) */
 	resp->count = (argp->count >> 2) - 2;
-- 
2.38.1

