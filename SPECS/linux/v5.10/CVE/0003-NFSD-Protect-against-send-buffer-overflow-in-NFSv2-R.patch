From 91e2952fd6a6ec18901922e5c6f86749f2a8a69e Mon Sep 17 00:00:00 2001
From: Chuck Lever <chuck.lever@oracle.com>
Date: Mon, 12 Dec 2022 03:25:19 -0600
Subject: [PATCH 3/4] NFSD: Protect against send buffer overflow in NFSv2 READ

commit 401bc1f90874280a80b93f23be33a0e7e2d1f912 upstream.

Since before the git era, NFSD has conserved the number of pages
held by each nfsd thread by combining the RPC receive and send
buffers into a single array of pages. This works because there are
no cases where an operation needs a large RPC Call message and a
large RPC Reply at the same time.

Once an RPC Call has been received, svc_process() updates
svc_rqst::rq_res to describe the part of rq_pages that can be
used for constructing the Reply. This means that the send buffer
(rq_res) shrinks when the received RPC record containing the RPC
Call is large.

A client can force this shrinkage on TCP by sending a correctly-
formed RPC Call header contained in an RPC record that is
excessively large. The full maximum payload size cannot be
constructed in that case.

Cc: <stable@vger.kernel.org>
Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
Reviewed-by: Jeff Layton <jlayton@kernel.org>
Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
[Fix ported to match existing code pattern(if vs min).
Limit argp->count to rq_res - vbrahmajosyula]
Signed-off-by: Vamsi Krishna Brahmajosyula <vbrahmajosyula@vmware.com>
---
 fs/nfsd/nfsproc.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/fs/nfsd/nfsproc.c b/fs/nfsd/nfsproc.c
index bbd01e839..56b2d5b61 100644
--- a/fs/nfsd/nfsproc.c
+++ b/fs/nfsd/nfsproc.c
@@ -189,6 +189,10 @@ nfsd_proc_read(struct svc_rqst *rqstp)
 				argp->count);
 		argp->count = NFSSVC_MAXBLKSIZE_V2;
 	}
+
+	if (rqstp->rq_res.buflen < argp->count)
+		argp->count = rqstp->rq_res.buflen;
+
 	svc_reserve_auth(rqstp, (19<<2) + argp->count + 4);
 
 	resp->count = argp->count;
-- 
2.38.1

