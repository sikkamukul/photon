From ceec51aa65ff15133bd5f6d126b16e9a4451547f Mon Sep 17 00:00:00 2001
From: Todd Sabin <tsabin@vmware.com>
Date: Wed, 23 Jun 2021 04:20:44 +0000
Subject: [PATCH] drivers/vfio/pci: Add kernel parameter to allow disabling of
 pci resets

Signed-off-by: Sharan Turlapati <sturlapati@vmware.com>
---
 drivers/vfio/pci/vfio_pci.c         | 59 +++++++++++++++++++++++------
 drivers/vfio/pci/vfio_pci_config.c  | 22 ++++++++---
 drivers/vfio/pci/vfio_pci_private.h |  2 +
 3 files changed, 65 insertions(+), 18 deletions(-)

diff --git a/drivers/vfio/pci/vfio_pci.c b/drivers/vfio/pci/vfio_pci.c
index 57ae8b46b836..6d8923939f98 100644
--- a/drivers/vfio/pci/vfio_pci.c
+++ b/drivers/vfio/pci/vfio_pci.c
@@ -64,6 +64,16 @@ static bool disable_denylist;
 module_param(disable_denylist, bool, 0444);
 MODULE_PARM_DESC(disable_denylist, "Disable use of device denylist. Disabling the denylist allows binding to devices with known errata that may lead to exploitable stability or security issues when accessed by untrusted users.");
 
+static bool disable_resets;
+module_param(disable_resets, bool, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(disable_resets, "Disable the issuing of PCI resets");
+
+bool vfio_pci_resets_disabled(void)
+{
+	return disable_resets;
+}
+
+
 static inline bool vfio_vga_disabled(void)
 {
 #ifdef CONFIG_VFIO_PCI_VGA
@@ -325,11 +335,16 @@ static int vfio_pci_enable(struct vfio_pci_device *vdev)
 	if (ret)
 		return ret;
 
-	/* If reset fails because of the device lock, fail this path entirely */
-	ret = pci_try_reset_function(pdev);
-	if (ret == -EAGAIN) {
-		pci_disable_device(pdev);
-		return ret;
+	if (vfio_pci_resets_disabled()) {
+		dev_info(&pdev->dev, "refusing to reset\n");
+		ret = -EINVAL;
+	} else {
+		/* If reset fails because of the device lock, fail this path entirely */
+		ret = pci_try_reset_function(pdev);
+		if (ret == -EAGAIN) {
+			pci_disable_device(pdev);
+			return ret;
+		}
 	}
 
 	vdev->reset_works = !ret;
@@ -496,13 +511,17 @@ static void vfio_pci_disable(struct vfio_pci_device *vdev)
 	 * We can not use the "try" reset interface here, which will
 	 * overwrite the previously restored configuration information.
 	 */
-	if (vdev->reset_works && pci_cfg_access_trylock(pdev)) {
-		if (device_trylock(&pdev->dev)) {
-			if (!__pci_reset_function_locked(pdev))
-				vdev->needs_reset = false;
-			device_unlock(&pdev->dev);
+	if (vfio_pci_resets_disabled()) {
+		dev_info(&pdev->dev, "refusing reset on disable\n");
+	} else {
+		if (vdev->reset_works && pci_cfg_access_trylock(pdev)) {
+			if (device_trylock(&pdev->dev)) {
+				if (!__pci_reset_function_locked(pdev))
+					vdev->needs_reset = false;
+				device_unlock(&pdev->dev);
+			}
+			pci_cfg_access_unlock(pdev);
 		}
-		pci_cfg_access_unlock(pdev);
 	}
 
 	pci_restore_state(pdev);
@@ -1084,6 +1103,12 @@ static long vfio_pci_ioctl(void *device_data,
 		if (!vdev->reset_works)
 			return -EINVAL;
 
+		if (vfio_pci_resets_disabled()) {
+			pr_info("%s: refusing VFIO_DEVICE_RESET request\n",
+				__func__);
+			return -EINVAL;
+		}
+
 		vfio_pci_zap_and_down_write_memory_lock(vdev);
 		ret = pci_try_reset_function(vdev->pdev);
 		up_write(&vdev->memory_lock);
@@ -1180,6 +1205,12 @@ static long vfio_pci_ioctl(void *device_data,
 		if (hdr.argsz < minsz || hdr.flags)
 			return -EINVAL;
 
+		if (vfio_pci_resets_disabled()) {
+			pr_info("%s: refusing VFIO_DEVICE_PCI_HOT_RESET request\n",
+				__func__);
+			return -EINVAL;
+		}
+
 		/* Can we do a slot or bus reset or neither? */
 		if (!pci_probe_reset_slot(vdev->pdev->slot))
 			slot = true;
@@ -2379,7 +2410,11 @@ static void vfio_pci_try_bus_reset(struct vfio_pci_device *vdev)
 	for (i = 0; i < devs.cur_index; i++) {
 		tmp = vfio_device_data(devs.devices[i]);
 		if (tmp->needs_reset) {
-			ret = pci_reset_bus(vdev->pdev);
+			if (vfio_pci_resets_disabled()) {
+				pr_info("%s: refusing bus reset\n", __func__);
+			} else {
+				ret = pci_reset_bus(vdev->pdev);
+			}
 			break;
 		}
 	}
diff --git a/drivers/vfio/pci/vfio_pci_config.c b/drivers/vfio/pci/vfio_pci_config.c
index 47f21a6ca7fe..5c5053478834 100644
--- a/drivers/vfio/pci/vfio_pci_config.c
+++ b/drivers/vfio/pci/vfio_pci_config.c
@@ -858,9 +858,14 @@ static int vfio_exp_config_write(struct vfio_pci_device *vdev, int pos,
 						 &cap);
 
 		if (!ret && (cap & PCI_EXP_DEVCAP_FLR)) {
-			vfio_pci_zap_and_down_write_memory_lock(vdev);
-			pci_try_reset_function(vdev->pdev);
-			up_write(&vdev->memory_lock);
+			if (vfio_pci_resets_disabled()) {
+				pr_info("%s: refusing reset\n",
+					__func__);
+			} else {
+				vfio_pci_zap_and_down_write_memory_lock(vdev);
+				pci_try_reset_function(vdev->pdev);
+				up_write(&vdev->memory_lock);
+			}
 		}
 	}
 
@@ -940,9 +945,14 @@ static int vfio_af_config_write(struct vfio_pci_device *vdev, int pos,
 						&cap);
 
 		if (!ret && (cap & PCI_AF_CAP_FLR) && (cap & PCI_AF_CAP_TP)) {
-			vfio_pci_zap_and_down_write_memory_lock(vdev);
-			pci_try_reset_function(vdev->pdev);
-			up_write(&vdev->memory_lock);
+			if (vfio_pci_resets_disabled()) {
+				pr_info("%s: refusing reset\n",
+					__func__);
+			} else {
+				vfio_pci_zap_and_down_write_memory_lock(vdev);
+				pci_try_reset_function(vdev->pdev);
+				up_write(&vdev->memory_lock);
+			}
 		}
 	}
 
diff --git a/drivers/vfio/pci/vfio_pci_private.h b/drivers/vfio/pci/vfio_pci_private.h
index 5c90e560c5c7..dcaf0763e845 100644
--- a/drivers/vfio/pci/vfio_pci_private.h
+++ b/drivers/vfio/pci/vfio_pci_private.h
@@ -225,4 +225,6 @@ static inline int vfio_pci_info_zdev_add_caps(struct vfio_pci_device *vdev,
 }
 #endif
 
+extern bool vfio_pci_resets_disabled(void);
+
 #endif /* VFIO_PCI_PRIVATE_H */
-- 
2.19.0

