From 09d552cdd9ad119b6e296e6251c6287552e4c975 Mon Sep 17 00:00:00 2001
From: Keerthana K <keerthanak@vmware.com>
Date: Wed, 16 Aug 2023 17:42:03 +0530
Subject: [PATCH] scripts-kallsyms: Extra kallsyms parsing

Adding new option "--extra-symbols=<kallsyms-file>" to scripts/kallsyms.c
This helps in adding required symbols to vmlinux when CONFIG_KALLSYMS_ALL
is disabled.
---
 scripts/kallsyms.c      | 107 +++++++++++++++++++++++++++++++++++++++++++-----
 scripts/link-vmlinux.sh |   2 +
 2 files changed, 99 insertions(+), 10 deletions(-)

diff --git a/scripts/kallsyms.c b/scripts/kallsyms.c
index 54ad86d..d528bea 100644
--- a/scripts/kallsyms.c
+++ b/scripts/kallsyms.c
@@ -24,6 +24,8 @@
 #include <string.h>
 #include <ctype.h>
 #include <limits.h>
+#include <getopt.h>
+#include <errno.h>
 
 #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr[0]))
 
@@ -44,10 +46,15 @@ struct addr_range {
 
 static unsigned long long _text;
 static unsigned long long relative_base;
+
+char **extra_sym_tbl = NULL;
+int extra_sym_tbl_size = 0;
+
 static struct addr_range text_ranges[] = {
 	{ "_stext",     "_etext"     },
 	{ "_sinittext", "_einittext" },
 };
+
 #define text_range_text     (&text_ranges[0])
 #define text_range_inittext (&text_ranges[1])
 
@@ -58,6 +65,7 @@ static struct addr_range percpu_range = {
 static struct sym_entry **table;
 static unsigned int table_size, table_cnt;
 static int all_symbols;
+static int extra_symbols;
 static int absolute_percpu;
 static int base_relative;
 
@@ -195,6 +203,55 @@ static void check_symbol_range(const char *sym, unsigned long long addr,
 	}
 }
 
+// Read extra-kallsyms and populate extra-kallsyms table
+static void populate_extra_symbol_table(char *file_name)
+{
+	size_t i = 0;
+	FILE *f = NULL;
+	char sym_name[KSYM_NAME_LEN];
+
+	if (!file_name) {
+		fprintf(stderr, "File name is NULL\n");
+		exit(1);
+	}
+
+	f = fopen(file_name, "r");
+	if (f == NULL) {
+		fprintf(stderr, "Unable to open %s\n", file_name);
+		exit(1);
+	}
+
+	while (fscanf(f, "%s", sym_name) == 1) {
+		extra_sym_tbl_size++;
+	}
+	if (extra_sym_tbl_size == 0) {
+		fprintf(stderr, "Symbol file format error: %d %s\n",
+			errno, strerror(errno));
+		goto ret;
+	}
+	extra_sym_tbl = (char **)malloc(extra_sym_tbl_size * sizeof(char*));
+	fseek(f, 0, SEEK_SET);
+	while (fscanf(f, "%s", sym_name) == 1) {
+		extra_sym_tbl[i++] = strdup(sym_name);
+	}
+	if (!feof(f)) {
+		fprintf(stderr, "Symbol file %s format error: %d %s\n",
+			file_name, errno, strerror(errno));
+		goto ret;
+	}
+ret:
+	fclose(f);
+}
+
+static void free_extra_symbol_table(void)
+{
+	size_t i = 0;
+
+	for (i = 0; i < extra_sym_tbl_size; i++)
+		free(extra_sym_tbl[i]);
+	free(extra_sym_tbl);
+}
+
 static struct sym_entry *read_symbol(FILE *in)
 {
 	char name[500], type;
@@ -265,10 +322,17 @@ static int symbol_in_range(const struct sym_entry *s,
 static int symbol_valid(const struct sym_entry *s)
 {
 	const char *name = sym_name(s);
+	unsigned int i = 0;
 
 	/* if --all-symbols is not specified, then symbols outside the text
 	 * and inittext sections are discarded */
 	if (!all_symbols) {
+		if (extra_symbols) {
+			for (i = 0; i < extra_sym_tbl_size; i++) {
+				if (strcmp(name, extra_sym_tbl[i]) == 0)
+					return 1;
+			}
+		}
 		if (symbol_in_range(s, text_ranges,
 				    ARRAY_SIZE(text_ranges)) == 0)
 			return 0;
@@ -764,21 +828,43 @@ static void record_relative_base(void)
 
 int main(int argc, char **argv)
 {
+	char *sym_file = NULL;
 	if (argc >= 2) {
-		int i;
-		for (i = 1; i < argc; i++) {
-			if(strcmp(argv[i], "--all-symbols") == 0)
-				all_symbols = 1;
-			else if (strcmp(argv[i], "--absolute-percpu") == 0)
-				absolute_percpu = 1;
-			else if (strcmp(argv[i], "--base-relative") == 0)
-				base_relative = 1;
-			else
-				usage();
+		int opt = 0, index = 0;
+		static struct option options[] = {
+			{"all-symbols", no_argument, 0, 'l'},
+			{"absolute-percpu", no_argument, 0,'a'},
+			{"base-relative", no_argument, 0, 'b'},
+			{"extra-symbols", required_argument, 0, 's'},
+			{0, 0, 0, 0}
+		};
+		while ((opt = getopt_long_only(argc, argv, "",
+				options, &index)) != -1)
+		{
+			switch(opt) {
+				case 'l':
+					all_symbols = 1;
+					break;
+				case 'a':
+					absolute_percpu = 1;
+					break;
+				case 'b':
+					base_relative = 1;
+					break;
+				case 's':
+					extra_symbols = 1;
+					sym_file = optarg;
+					break;
+				default:
+					usage();
+			}
 		}
 	} else if (argc != 1)
 		usage();
 
+	if (extra_symbols) {
+		populate_extra_symbol_table(sym_file);
+	}
 	read_map(stdin);
 	shrink_table();
 	if (absolute_percpu)
@@ -789,5 +875,6 @@ int main(int argc, char **argv)
 	optimize_token_table();
 	write_src();
 
+	free_extra_symbol_table();
 	return 0;
 }
diff --git a/scripts/link-vmlinux.sh b/scripts/link-vmlinux.sh
index acd07a7..80e5b29 100755
--- a/scripts/link-vmlinux.sh
+++ b/scripts/link-vmlinux.sh
@@ -192,6 +192,8 @@ kallsyms()
 		kallsymopt="${kallsymopt} --base-relative"
 	fi
 
+	kallsymopt="${kallsymopt} --extra-symbols=crypto/fips_canister-kallsyms"
+
 	info KSYMS ${2}
 	${NM} -n ${1} | scripts/kallsyms ${kallsymopt} > ${2}
 }
-- 
2.7.4

