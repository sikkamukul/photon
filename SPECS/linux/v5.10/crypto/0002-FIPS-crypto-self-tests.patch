From f46f799e03c6cdca9c24bcc2483f82752ee75b58 Mon Sep 17 00:00:00 2001
From: Keerthana K <keerthanak@vmware.com>
Date: Tue, 5 Jan 2021 10:45:39 +0000
Subject: [PATCH] FIPS crypto self tests

Added testmgr test vectors for all the self test combinations.
crypto_self_test module invokes test of crypto algorithms.

Alexey: add FIPS_NOT_ALLOWED macro
---
 crypto/Kconfig            |  13 +
 crypto/Makefile           |   1 +
 crypto/crypto_self_test.c | 103 ++++++
 crypto/testmgr.c          |  70 +++-
 crypto/testmgr.h          | 757 ++++++++++++++++++++++++++++++++++++++
 5 files changed, 930 insertions(+), 14 deletions(-)
 create mode 100644 crypto/crypto_self_test.c

diff --git a/crypto/Kconfig b/crypto/Kconfig
index 1157f82dc..08debffe8 100644
--- a/crypto/Kconfig
+++ b/crypto/Kconfig
@@ -206,6 +206,21 @@ config CRYPTO_TEST
 	help
 	  Quick & dirty crypto test module.
 
+config CRYPTO_SELF_TEST
+	bool "Crypto self test"
+	select CRYPTO_MANAGER
+	select CRYPTO_FIPS
+	select CRYPTO_AES
+	select CRYPTO_CBC
+	select CRYPTO_ECB
+	select CRYPTO_DES
+	select CRYPTO_XTS
+	select CRYPTO_RSA
+	select CRYPTO_SHA256
+	select CRYPTO_SHA512
+	help
+	  Crypto self test module for FIPS.
+
 config CRYPTO_SIMD
 	tristate
 	select CRYPTO_CRYPTD
diff --git a/crypto/Makefile b/crypto/Makefile
index b279483fba50..b7861fc22d33 100644
--- a/crypto/Makefile
+++ b/crypto/Makefile
@@ -49,6 +49,7 @@ sm2_generic-y += sm2signature.asn1.o
 sm2_generic-y += sm2.o
 
 obj-$(CONFIG_CRYPTO_SM2) += sm2_generic.o
+obj-$(CONFIG_CRYPTO_SELF_TEST) += crypto_self_test.o
 
 crypto_acompress-y := acompress.o
 crypto_acompress-y += scompress.o
diff --git a/crypto/crypto_self_test.c b/crypto/crypto_self_test.c
new file mode 100644
index 000000000..c2ffd20c9
--- /dev/null
+++ b/crypto/crypto_self_test.c
@@ -0,0 +1,103 @@
+/*
+ * Self test for Crypto Algorithms
+ *
+ * Copyright (c) 2020 VMware
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/fips.h>
+#include <linux/init.h>
+#include <linux/err.h>
+#include <linux/crypto.h>
+MODULE_LICENSE("GPL");
+
+extern int alg_test(const char *driver, const char *alg, u32 type, u32 mask);
+
+struct alg_self_test {
+	char *driver_name;
+	char *alg_name;
+};
+
+static struct alg_self_test __initdata alg_self_test_tbl[]  =
+{
+	{
+		.driver_name = "cbc(aes)",
+		.alg_name = "cbc(aes)",
+	},
+	{
+		.driver_name = "cbc(des3_ede)",
+		.alg_name = "cbc(des3_ede)",
+	},
+	{
+		.driver_name = "ctr(aes)",
+		.alg_name = "ctr(aes)",
+	},
+	{
+		.driver_name = "ctr(des3_ede)",
+		.alg_name = "ctr(des3_ede)",
+	},
+	{
+		.driver_name = "ecb(aes)",
+		.alg_name = "ecb(aes)",
+	},
+	{
+		.driver_name = "ecb(des3_ede)",
+		.alg_name = "ecb(des3_ede)",
+	},
+	{
+		.driver_name = "hmac(sha224)",
+		.alg_name = "hmac(sha224)",
+	},
+	{
+		.driver_name = "pkcs1pad(rsa,sha224)",
+		.alg_name = "pkcs1pad(rsa,sha224)",
+	},
+	{
+		.driver_name = "pkcs1pad(rsa,sha256)",
+		.alg_name = "pkcs1pad(rsa,sha256)",
+	},
+	{
+		.driver_name = "pkcs1pad(rsa,sha384)",
+		.alg_name = "pkcs1pad(rsa,sha384)",
+	},
+	{
+		.driver_name = "pkcs1pad(rsa,sha512)",
+		.alg_name = "pkcs1pad(rsa,sha512)",
+	},
+	{
+		.driver_name = "xts(aes)",
+		.alg_name = "xts(aes)",
+	},
+};
+
+#ifdef FIPS_NOT_ALLOWED
+extern int FIPS_NOT_ALLOWED(char *);
+#else
+#define FIPS_NOT_ALLOWED(algname) 0
+#endif
+
+static int __init crypto_self_test_init(void)
+{
+	int err = -ENOMEM;
+	int i = 0;
+
+	if (!fips_enabled) {
+		return -EAGAIN;
+	}
+	for (i = 0; i < ARRAY_SIZE(alg_self_test_tbl); i++) {
+		if (FIPS_NOT_ALLOWED(alg_self_test_tbl[i].alg_name))
+			continue;
+		err = alg_test(alg_self_test_tbl[i].driver_name, alg_self_test_tbl[i].alg_name, 0, 0);
+		if (err) {
+			printk(KERN_ERR "crypto_self_test failed for %s %s \n",
+					 alg_self_test_tbl[i].driver_name,
+					 alg_self_test_tbl[i].alg_name);
+			goto error;
+		}
+	}
+	return 0;
+error:
+	return err;
+}
+module_init(crypto_self_test_init);
diff --git a/crypto/testmgr.c b/crypto/testmgr.c
index 3ed7993a60f5..b505d0286df7 100644
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@ -4686,7 +4686,10 @@ static const struct alg_test_desc alg_test_descs[] = {
 		 */
 		.alg = "drbg_nopr_hmac_sha1",
 		.fips_allowed = 1,
-		.test = alg_test_null,
+		.test = alg_test_drbg,
+		.suite = {
+			.drbg = __VECS(drbg_nopr_hmac_sha1_tv_template)
+		}
 	}, {
 		.alg = "drbg_nopr_hmac_sha256",
 		.test = alg_test_drbg,
@@ -4698,15 +4701,24 @@ static const struct alg_test_desc alg_test_descs[] = {
 		/* covered by drbg_nopr_hmac_sha256 test */
 		.alg = "drbg_nopr_hmac_sha384",
 		.fips_allowed = 1,
-		.test = alg_test_null,
+		.test = alg_test_drbg,
+		.suite = {
+			.drbg = __VECS(drbg_nopr_hmac_sha384_tv_template)
+		}
 	}, {
 		.alg = "drbg_nopr_hmac_sha512",
-		.test = alg_test_null,
+		.test = alg_test_drbg,
 		.fips_allowed = 1,
+		.suite = {
+			.drbg = __VECS(drbg_nopr_hmac_sha512_tv_template)
+		}
 	}, {
 		.alg = "drbg_nopr_sha1",
 		.fips_allowed = 1,
-		.test = alg_test_null,
+		.test = alg_test_drbg,
+		.suite = {
+			.drbg = __VECS(drbg_nopr_sha1_tv_template)
+		}
 	}, {
 		.alg = "drbg_nopr_sha256",
 		.test = alg_test_drbg,
@@ -4718,11 +4730,17 @@ static const struct alg_test_desc alg_test_descs[] = {
 		/* covered by drbg_nopr_sha256 test */
 		.alg = "drbg_nopr_sha384",
 		.fips_allowed = 1,
-		.test = alg_test_null,
+		.test = alg_test_drbg,
+		.suite = {
+			.drbg = __VECS(drbg_nopr_sha384_tv_template)
+		}
 	}, {
 		.alg = "drbg_nopr_sha512",
 		.fips_allowed = 1,
-		.test = alg_test_null,
+		.test = alg_test_drbg,
+		.suite = {
+			.drbg = __VECS(drbg_nopr_sha512_tv_template)
+		}
 	}, {
 		.alg = "drbg_pr_ctr_aes128",
 		.test = alg_test_drbg,
@@ -4734,7 +4752,10 @@ static const struct alg_test_desc alg_test_descs[] = {
 		/* covered by drbg_pr_ctr_aes128 test */
 		.alg = "drbg_pr_ctr_aes192",
 		.fips_allowed = 1,
-		.test = alg_test_null,
+		.test = alg_test_drbg,
+		.suite = {
+			.drbg = __VECS(drbg_pr_ctr_aes192_tv_template)
+		}
 	}, {
 		.alg = "drbg_pr_ctr_aes256",
 		.fips_allowed = 1,
@@ -4745,7 +4766,10 @@ static const struct alg_test_desc alg_test_descs[] = {
 	}, {
 		.alg = "drbg_pr_hmac_sha1",
 		.fips_allowed = 1,
-		.test = alg_test_null,
+		.test = alg_test_drbg,
+		.suite = {
+			.drbg = __VECS(drbg_pr_hmac_sha1_tv_template)
+		}
 	}, {
 		.alg = "drbg_pr_hmac_sha256",
 		.test = alg_test_drbg,
@@ -4757,15 +4781,24 @@ static const struct alg_test_desc alg_test_descs[] = {
 		/* covered by drbg_pr_hmac_sha256 test */
 		.alg = "drbg_pr_hmac_sha384",
 		.fips_allowed = 1,
-		.test = alg_test_null,
+		.test = alg_test_drbg,
+		.suite = {
+			.drbg = __VECS(drbg_pr_hmac_sha384_tv_template)
+		}
 	}, {
 		.alg = "drbg_pr_hmac_sha512",
-		.test = alg_test_null,
+		.test = alg_test_drbg,
 		.fips_allowed = 1,
+		.suite = {
+			.drbg = __VECS(drbg_pr_hmac_sha512_tv_template)
+		}
 	}, {
 		.alg = "drbg_pr_sha1",
 		.fips_allowed = 1,
-		.test = alg_test_null,
+		.test = alg_test_drbg,
+		.suite = {
+			.drbg = __VECS(drbg_pr_sha1_tv_template)
+		}
 	}, {
 		.alg = "drbg_pr_sha256",
 		.test = alg_test_drbg,
@@ -4777,11 +4810,17 @@ static const struct alg_test_desc alg_test_descs[] = {
 		/* covered by drbg_pr_sha256 test */
 		.alg = "drbg_pr_sha384",
 		.fips_allowed = 1,
-		.test = alg_test_null,
+		.test = alg_test_drbg,
+		.suite = {
+			.drbg = __VECS(drbg_pr_sha384_tv_template)
+		}
 	}, {
 		.alg = "drbg_pr_sha512",
 		.fips_allowed = 1,
-		.test = alg_test_null,
+		.test = alg_test_drbg,
+		.suite = {
+			.drbg = __VECS(drbg_pr_sha512_tv_template)
+		}
 	}, {
 		.alg = "ecb(aes)",
 		.test = alg_test_skcipher,
@@ -5216,8 +5255,11 @@ static const struct alg_test_desc alg_test_descs[] = {
 		.fips_allowed = 1,
 	}, {
 		.alg = "pkcs1pad(rsa,sha512)",
-		.test = alg_test_null,
+		.test = alg_test_akcipher,
 		.fips_allowed = 1,
+		.suite = {
+			.akcipher = __VECS(pkcs1pad_rsa_sha512_tv_template)
+		}
 	}, {
 		.alg = "poly1305",
 		.test = alg_test_hash,
diff --git a/crypto/testmgr.h b/crypto/testmgr.h
index d7db7eb2fde2..64f6984a7d02 100644
--- a/crypto/testmgr.h
+++ b/crypto/testmgr.h
@@ -815,6 +815,205 @@ static const struct akcipher_testvec pkcs1pad_rsa_tv_template[] = {
 	}
 };
 
+static const struct akcipher_testvec pkcs1pad_rsa_sha512_tv_template[] = {
+	{
+	.key =
+	"\x30\x82\x04\x9e\x02\x01\x00\x02\x82\x01"
+	"\x80\x9b\xa7\x1b\xd3\x41\xc1\xd8\xe1\xd6"
+	"\x5a\x3a\x90\xc1\x4d\xc0\xd7\xf9\x29\x71"
+	"\x9a\xc6\x1b\x52\x30\x09\x8a\x61\xfc\x80"
+	"\x28\xb9\xb5\xc2\x4c\xbe\x82\x99\xed\x50"
+	"\x2f\x43\x25\xad\xe3\x92\xe2\x1f\xb8\xdc"
+	"\x0f\x4e\xe9\xa4\x7d\xda\xdc\x58\x39\xf4"
+	"\x5e\xc4\xa8\xbc\x85\x9f\xaa\x63\xfc\x63"
+	"\x65\xe6\xc3\x97\x77\xc6\x95\x56\xf7\x23"
+	"\xb6\x37\xca\x91\x6e\x58\x5b\xbf\x6b\xa8"
+	"\x4c\xea\x1a\xb5\x99\x3f\x5e\x2a\x32\xc5"
+	"\x3f\xec\x09\x65\xca\x6b\x58\x29\x2d\xb7"
+	"\x44\x5c\x52\x01\x50\x2d\xcd\xaa\xc4\xa0"
+	"\xdb\xf3\xfc\xfa\x23\xf5\x41\x05\x25\x10"
+	"\x3f\xb4\xfa\x6e\xe6\x13\x42\x9a\x5c\xf1"
+	"\x76\x80\xea\x27\x01\x84\x0a\x1e\x2a\x7d"
+	"\x21\x5f\xca\x88\xc3\x37\x21\x14\x2b\xfc"
+	"\x34\x39\xd6\x03\xed\xa1\xbb\xeb\x9c\x3f"
+	"\xcf\x43\xc1\xfc\x95\xd0\x7b\x29\x89\x5d"
+	"\x3e\xe2\x1a\xb2\x77\x5b\x19\x57\xb5\x8b"
+	"\x53\xbd\xeb\xca\xa9\x8a\xc7\x02\x3c\x65"
+	"\xd8\x0c\xc6\xa3\x01\x4b\x9f\x66\x64\x3a"
+	"\x1a\xf0\xb3\x73\x70\x49\xa1\xcc\x18\x94"
+	"\x25\x58\xef\xc9\x09\x33\xf8\x30\x09\xe2"
+	"\xf3\x91\x8e\xde\x1e\xde\xc6\x0a\x9c\x75"
+	"\x6d\xcb\xaf\x2f\x82\x2c\x81\x57\x8b\x08"
+	"\x2e\xd8\x52\x6c\xa8\x45\xe5\x8d\x1a\xee"
+	"\x2b\xe9\x01\x68\x65\xc0\x3f\xdc\x06\xc4"
+	"\xda\xcd\x54\x49\xb3\x35\xc2\x8d\x9f\xbd"
+	"\x93\x4c\xef\xc9\xc8\x39\x68\x47\x2c\x20"
+	"\x3e\x1f\x92\x6f\x52\x4e\x4c\xad\xb8\xb8"
+	"\x49\x21\xe5\x25\x41\x40\x01\x5f\xe2\x0c"
+	"\x46\x75\x46\x92\x7e\x01\x54\xa5\xaa\x46"
+	"\xec\xce\x3f\x9e\x43\x17\xd2\x62\x76\x3b"
+	"\x2a\x3f\x3c\x69\xf9\x78\xeb\xd2\x45\xc8"
+	"\xc9\xd3\xd2\x8e\xed\x74\x06\x63\xd9\xd1"
+	"\x84\x16\x93\x20\x68\xa1\x5b\xcc\x12\xd8"
+	"\xe2\xdb\xe5\x7c\xf6\x62\x7b\x7f\x47\xba"
+	"\x55\x44\xf3\xb9\x08\x23\x91\xf7\x9b\x3e"
+	"\xb2\xdc\x94\x6d\xcb\x02\x82\x01\x80\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
+	"\x01\x00\x01\x02\x82\x01\x80\x0a\x5a\xb7"
+	"\xd4\xcf\x87\x5d\x58\x75\xfc\x48\x9b\x15"
+	"\x3b\x89\x3c\x3f\x71\xf7\x57\x0c\x1e\x08"
+	"\x7d\xf3\x94\x86\x12\x2d\xab\x07\xe2\x44"
+	"\x76\x50\x7c\xba\xfa\xa3\x73\xe6\xc1\x47"
+	"\x41\x0a\xa6\x0a\x3a\xda\x40\xc1\x1c\xca"
+	"\x79\x7e\x29\x5c\x4b\xcc\x00\x25\xe5\x9d"
+	"\x02\x3d\x43\x30\xd0\x3b\x03\x2e\x07\xb8"
+	"\x38\x1a\x8e\x18\x06\x96\xbf\x3f\x6a\x35"
+	"\x4f\x24\x32\x43\x98\x9e\x23\x32\x60\xeb"
+	"\xd0\x5c\x51\x1f\xa3\x82\xfa\xf9\x46\x62"
+	"\xc4\x1a\xc1\xf6\xf3\x4d\xec\x0e\x96\xd1"
+	"\xf4\x35\xd2\x7c\x58\x04\xe4\xbc\xe5\x5e"
+	"\x4a\x82\xbd\x26\xe2\x21\x4e\x40\xf4\x21"
+	"\x3e\x78\x42\x32\x51\xee\x7f\x80\x9c\x92"
+	"\xfd\xb1\xd2\x99\x26\x75\xc3\xd6\x43\x25"
+	"\xe2\x93\xf4\x9a\x5f\xec\x06\x19\x61\x82"
+	"\xf4\xb8\x3b\xef\xb4\xd4\x35\xd8\x7f\x10"
+	"\xc0\xc7\xe9\x4e\xde\x64\x1a\x93\xcb\x4c"
+	"\xdb\x4d\xc4\x70\xd0\xe8\x8a\x28\x94\x6a"
+	"\x9b\x92\xe8\x45\x25\xaa\x36\x50\x39\x7a"
+	"\xff\x36\xd5\xe6\x15\x37\xad\x2b\xfa\xe8"
+	"\x19\xc2\xb7\x45\xd5\x1a\x50\xf1\x0b\xbe"
+	"\xae\xaa\x86\xb9\x28\x3f\x26\xbb\x37\x74"
+	"\xeb\x8d\x6f\x65\x0c\x5c\x74\x35\x83\xb5"
+	"\x70\x6b\xef\xe3\x44\xe9\x6b\xdc\xa1\x2e"
+	"\x8b\x37\x4d\xa6\x44\x45\x46\xe2\x08\xb3"
+	"\x56\x01\x31\xa5\x0f\xfa\x7a\xb0\xc6\xfb"
+	"\x67\x92\xa6\x1d\x2e\xb4\x07\x7d\x7b\x29"
+	"\x4b\xb6\xda\x33\x77\x0e\xd6\x62\xab\x00"
+	"\x95\x09\x0f\xef\xc9\x72\xdd\xc4\x2a\x63"
+	"\x3b\x9c\x08\x30\xf9\x46\xba\x3d\x90\x98"
+	"\x90\x33\x33\x40\x62\xf5\xac\xc4\xa7\x4d"
+	"\x08\x23\x72\x43\x87\x18\xaa\x20\xcd\xcf"
+	"\xdc\x87\x66\xa8\xe9\xbf\xab\xa0\x7e\xc5"
+	"\xbb\x97\x4d\xec\x52\x43\xac\x18\xc5\x18"
+	"\x04\x78\xd3\x53\x20\x86\x01\x92\x19\x1f"
+	"\xf3\x3f\xfa\x7d\xe4\x6c\xf1\xd8\x43\x2a"
+	"\xdb\x11\x0f\x9d\xd5\x47\x49\x85\x87\xa7"
+	"\x89\x02\x01\x00\x02\x01\x00\x02\x01\x00"
+	"\x02\x01\x00\x02\x01\x00\x00",
+	.key_len = 1187,
+	/*
+	 * m is SHA512 hash of following message:
+	 * "\xe1\x0b\x81\xe1\xf5\xa8\xa5\x92\xff\x6c"
+	 * "\xda\xf0\xbf\x32\xca\x78\xe8\x7e\xe9\xf4"
+	 * "\xa1\xa4\x3e\x19\x6b\xe1\xda\x33\xf1\x88"
+	 * "\xbf\x0d\x4f\x94\x80\xfb\xe3\x34\xfe\xdb"
+	 * "\xb1\xda\xfa\xb7\x52\xf4\x24\x41\xd1\x9e"
+	 * "\x86\xc1\xb9\x22\x59\x61\x07\x65\x16\xf4"
+	 * "\x83\x57\x6d\xfa\x24\x2c\xe4\xe3\x74\x9b"
+	 * "\x17\x6f\x3f\xa3\x17\xfb\x06\x45\x7f\x81"
+	 * "\xd5\x5e\x8a\x5f\x82\xe3\x3a\x34\x78\xf4"
+	 * "\x97\xfa\xa3\x3e\x7e\xc8\xd6\x00\xfd\xd1"
+	 * "\x76\xf9\xa0\x5b\xfd\x08\xa5\xf3\x56\xd1"
+	 * "\x56\x9f\x60\xba\x32\x02\x1f\x43\xfa\x21"
+	 * "\xfe\x5a\xdd\x14\xf7\x14\x77\xe4\x96\x6d"
+	 * "\xcd\x5c\xe5\xdf\x3b\x08\x60\xaa\xa3\x7d"
+	 * "\x05\x38\x8f\x55\x09\x8f\x0f\x1b\x23\x15"
+	 * "\x36\xa3\x5c\xe2\xb1\xb2\x02\x00\x05\xa0"
+	 * "\x85\xaa\x2c\xe5\x27\x5f\x2e\x6f\xd5\x55"
+	 * "\x17\x56\xe7\x57\x04\xaf\x0c\xe0\x15\xfd"
+	 * "\xb5\xfd\x8f\xc2\x53\xf5\xbb\x13\x4f\x11"
+	 * "\x5d\x77"
+	 */
+	.m =
+	"\x81\x3d\x30\x88\xbf\x38\x9d\x04\x00\x48"
+	"\xcc\x16\xd0\x8f\x6c\x25\x70\xa9\xbd\x09"
+	"\xd1\x52\xea\x4b\xa5\x1f\xaa\xcd\x67\xed"
+	"\x48\x87\xea\x30\xc8\x06\xf0\xd1\x8e\xe0"
+	"\x07\x95\x38\xf6\xaa\x96\xd8\xad\x68\x5a"
+	"\x17\x21\xc6\x1a\xf8\x58\xd6\x60\x2a\x98"
+	"\x09\xb8\xf0\x0d",
+	.m_size = 64,
+	.c =
+	"\x7c\x73\x2b\xb1\xbc\xc2\x44\x2e\x81\xfb"
+	"\xe4\x1f\xea\x26\x7e\x32\x04\x5d\xa0\xb0"
+	"\xfc\x35\x68\x58\xfe\xa7\x54\x3a\x52\xea"
+	"\xa9\xdd\x35\x3a\x59\x30\x00\x89\xa9\xc6"
+	"\xa4\xab\xa0\x5f\x0a\xdb\xf0\x8a\x87\x85"
+	"\xef\x44\x26\x86\x23\x4f\x48\x6f\xb1\x6a"
+	"\xaf\xc6\x81\xc4\x53\xb7\xb0\x81\x44\xf8"
+	"\xb0\x9b\x7c\xf0\xdf\x36\x5e\xc3\xba\x12"
+	"\x0f\x43\xcf\x98\x2b\x4f\x3c\x2e\x49\xf8"
+	"\x66\xf6\x62\x4d\xd0\x4c\x8b\x14\x05\x71"
+	"\xb5\xd8\x14\xc4\x83\xb7\xaa\xda\xe1\x85"
+	"\x7e\x62\x66\x5b\x6f\x88\x15\x33\x16\x78"
+	"\x2c\x94\x29\xec\x30\xb2\xf7\xc1\x29\x89"
+	"\x2e\x4c\xd9\x41\x23\xce\xaa\x52\xd7\x95"
+	"\xce\x88\xb8\xcb\xc4\x5d\xfb\x5d\x7b\xed"
+	"\x2a\x3c\x93\x94\x37\xe0\xef\x90\xd2\x11"
+	"\xe1\xd4\x98\x40\x24\xdd\xd7\xf3\x0e\x73"
+	"\xb7\x60\x6c\x71\xf7\x33\xf0\x7c\xeb\xdf"
+	"\x7b\x5c\xab\x2c\x0a\x07\x99\xc5\x63\x54"
+	"\x94\xa2\x3b\xe8\xd4\x88\x22\x31\xc6\xc2"
+	"\x35\x10\xc2\x88\x37\x4f\x50\x07\x62\xff"
+	"\x1f\xcc\xb0\xa0\x7f\x96\xd9\xd0\xef\x2d"
+	"\x12\xbe\x5b\x1d\xb1\xeb\xcc\x8c\xbe\x20"
+	"\x16\xff\x34\xc1\x78\x20\x8c\x95\x0d\x89"
+	"\xdc\x93\x37\x97\x08\x7c\x1b\x81\x7d\x07"
+	"\x84\xda\xe6\x2a\x4b\x68\x96\x3d\x22\x1d"
+	"\xb4\xf6\x34\x52\xfd\x99\x51\x02\xb3\x45"
+	"\xbd\x23\x07\x81\x6f\x0f\x4c\xaf\x06\x38"
+	"\xb4\xf2\xa7\x2d\xc6\x01\x61\xf7\x52\x7b"
+	"\x3f\x3e\x61\xc6\x46\xb0\xe9\xc4\xfc\x90"
+	"\xbd\x3c\xaa\x3e\xd9\xd5\x4a\xae\xbe\x66"
+	"\x59\xbd\x37\xc7\x77\x93\x53\xd7\x88\x89"
+	"\x54\x26\xe4\x8d\x9e\xc0\xfe\x0e\xb3\xa6"
+	"\x7d\xea\xee\x0d\xd6\xbd\xe9\xea\xe1\x92"
+	"\x10\x4e\x16\xab\xf3\x10\xc5\x60\xe4\xe1"
+	"\x04\x5e\x9b\xbb\x1b\x2c\x0b\x3a\x82\x50"
+	"\x3d\x62\x5e\xd5\x04\xcb\x90\x2e\xf6\xba"
+	"\xcc\x57\x28\xcf\xb1\x15\x16\xe9\x02\x2b"
+	"\x27\x63\x4f\x67",
+	.c_size = 384,
+	.siggen_sigver_test = true,
+	}
+};
 static const struct kpp_testvec dh_tv_template[] = {
 	{
 	.secret =
@@ -21324,6 +21523,144 @@ static const struct drbg_testvec drbg_pr_ctr_aes256_tv_template[] = {
 	},
 };
 
+static const struct drbg_testvec drbg_pr_sha1_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+			"\x21\x29\x56\x39\x07\x83\x38\x1d\xbf\xc6"
+			"\x36\x2d\xd0\xda\x9a\x09\x52\x80\x98\x7f"
+			"\xc5\xe2\x7a\x49",
+		.entropylen = 24,
+		.entpra = (unsigned char *)
+			"\x2e\xdb\x39\x6e\xeb\x89\x60\xf7\x79\x43"
+			"\xc2\xa5\x90\x75\xa7\x86",
+		.entprb = (unsigned char *)
+			"\x30\xb5\x65\xb6\x3a\x50\x12\x67\x69\x40"
+			"\xd3\xef\x17\xd9\xe9\x96",
+		.entprlen = 16,
+		.expected = (unsigned char *)
+			"\xca\x50\xec\x95\xc7\xc3\x8a\x58\x12\x9f"
+			"\xd3\x75\x23\xd1\xf2\x59\x8c\xe6\xde\x98"
+			"\xa6\xf1\x07\x72\x4c\x55\x46\xbe\xad\xaa"
+			"\x5b\xaf\xbf\x1e\x62\xd2\x74\x84\x3f\x11"
+			"\x07\xc3\x45\xb1\x28\x81\x63\xf1\xdd\x24"
+			"\xaf\xb2\x7a\x63\xd3\x9e\xe2\xaa\x77\x0d"
+			"\xfc\xa6\x68\xeb\x13\x4a\xbe\x08\x05\x78"
+			"\xb2\xf8\xd1\xa3\xa8\x99\xf5\xa0\x0a\xf7",
+		.expectedlen = 80,
+		.addtla = NULL,
+		.addtlb = NULL,
+		.addtllen = 0,
+		.pers = NULL,
+		.perslen = 0,
+	},
+};
+
+static const struct drbg_testvec drbg_pr_sha384_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+			"\x83\x6e\xa2\x58\xe9\x7d\xb5\x14\xdc\xfa"
+			"\xcc\xc2\x4d\xfe\x63\x70\x80\x27\xa3\x30"
+			"\x74\xe8\xd4\x14\x43\xb7\x45\x70\x3b\x34"
+			"\x5c\x81\x0f\x04\x03\x58\x44\xf6\xaa\xe9"
+			"\x44\x44\x86\x51\x1d\x12\x9f\x7c",
+		.entropylen = 48,
+		.entpra = (unsigned char *)
+			"\x84\x39\x5a\x07\x71\x30\x93\x91\x6c\xf9"
+			"\xc2\x46\x3a\xb9\xb9\x98\x31\x27\x3b\xcd"
+			"\x5d\x21\xf3\x0c\x1a\xe4\x7a\xa6\x21\x8f"
+			"\x7c\xa2",
+		.entprb = (unsigned char *)
+			"\xed\x21\x83\x9b\xfe\x80\x27\x47\x88\x72"
+			"\xd0\x4b\x68\xa2\x76\xd8\x41\xfd\xd8\x7c"
+			"\xbf\x58\xa3\xb7\x7f\xd8\xba\x3d\x28\x53"
+			"\x94\x0c",
+		.entprlen = 32,
+		.expected = (unsigned char *)
+			"\x87\xa9\x18\xcb\x5e\xb0\xc5\xa0\xae\x3e"
+			"\xd3\x03\x1d\x2a\x39\x90\x4a\xf0\xb3\x38"
+			"\x14\xb7\xf3\xe2\x18\x8e\x05\x7c\xb2\xb2"
+			"\xc4\x41\x44\xa5\xfa\xcb\x09\x4c\x33\x4e"
+			"\x6e\xc7\x0d\x43\x66\xf8\x61\x5c\xcf\x98"
+			"\xcd\xf3\x39\x2d\x0d\x64\x41\x59\xf7\x21"
+			"\xda\xf2\xa7\x7a\xd7\xdb\xec\x72\xde\x6a"
+			"\x59\x36\x0e\xcd\x4f\xad\x60\x15\xe5\x91"
+			"\x70\xad\xb9\x6a\xda\x2c\xaf\x39\x51\xdf"
+			"\x3c\x6f\xd8\x93\x6c\x7d\x98\x62\xd9\xb8"
+			"\x1c\x84\xa9\xa1\xe6\xdf\x42\x3d\x74\x3d"
+			"\x15\x7e\xe5\x0a\xa8\xb9\x2f\xed\xd4\x20"
+			"\x52\xce\x4f\x17\xcf\x62\x9e\xae\x7d\xc2"
+			"\xa2\xd9\xf4\x8d\x73\x73\xf3\x0c\xe5\x3d"
+			"\xfe\x2e\x2e\x5f\xeb\xe9\x71\x8a\x87\x87"
+			"\xd3\xe1\xf3\x94\x1d\x0e\x9c\x47\x23\x33"
+			"\x25\x45\xd1\xa9\x9e\x94\x6c\xf5\xe3\xb3"
+			"\x35\xf9\x54\x91\x22\x69\x82\x89\x1d\xe7"
+			"\x5f\x31\x67\xd8\x80\xca\xda\x8a\x1e\x76"
+			"\xb2\x0e",
+		.expectedlen = 192,
+		.addtla = NULL,
+		.addtlb = NULL,
+		.addtllen = 0,
+		.pers = NULL,
+		.perslen = 0,
+	},
+};
+
+static const struct drbg_testvec drbg_pr_sha512_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+			"\x73\xc9\xb1\x15\xb7\xef\xb0\xa6\x32\x44"
+			"\xd7\x49\x3a\xe5\x82\x05\x99\xd7\xce\xe5"
+			"\xca\x05\x4d\xb2\xf7\x26\x9b\xa7\xf6\x21"
+			"\xbd\xca\xc2\x04\xe6\xde\x78\x9b\x03\x94"
+			"\xfb\xbe\x66\x63\x46\x6e\xfc\xea",
+		.entropylen = 48,
+		.entpra = (unsigned char *)
+			"\xcf\xce\xf3\x77\x6b\x37\x64\x9a\x7f\x6d"
+			"\x2b\x48\xf4\x43\xda\x79\xa2\xf2\xf8\x1d"
+			"\x04\xf3\xaf\x98\x53\xa9\xe6\x96\xc4\x48"
+			"\x74\x40",
+		.entprb = (unsigned char *)
+			"\xd0\x63\x8e\x28\xca\xe8\xd1\xc0\xf5\x72"
+			"\x09\xd6\x77\xd8\x89\xd1\x95\xa6\x72\x02"
+			"\x3c\xb8\xad\xe3\x9f\x79\x49\x89\xe1\xda"
+			"\xee\x34",
+		.entprlen = 32,
+		.expected = (unsigned char *)
+			"\x04\x74\x4d\x1d\x42\x60\x19\x95\xfa\x3b"
+			"\x10\x1d\xed\x3d\x25\x31\xcb\xf4\x5a\xfd"
+			"\x83\x12\x0d\x58\xeb\x26\x59\x4a\x86\x3b"
+			"\xd8\x31\x83\x11\xb0\x8d\x3d\xf4\xc5\x71"
+			"\xa9\xc2\x6d\xff\x63\xa3\xe9\x91\x3a\x9a"
+			"\x17\xa7\xc4\x55\x18\x6f\xdf\xdd\x90\xc6"
+			"\x64\xa8\x4b\x73\xa1\x10\x6a\x5a\x82\xf7"
+			"\x41\xbd\x4c\x7a\x48\xbd\x04\x6c\x26\x8d"
+			"\x89\x19\xef\xc9\x41\xf8\xb4\x5a\x3c\x3d"
+			"\x89\xcf\x37\x14\x1b\x5c\x41\xb1\x0f\xf5"
+			"\x43\xa6\x92\x62\x72\xd6\x23\xad\x8e\xcc"
+			"\xd0\x26\x55\x20\x90\xad\xcf\xac\xb1\x24"
+			"\xf4\x7c\x4a\xd6\x2b\xe9\x0e\xa5\xa0\xa7"
+			"\x08\x7d\x81\x45\x84\x45\x81\x3a\xf8\x8f"
+			"\xfb\x5a\x8c\x35\x19\xf9\x77\x13\x1c\xc8"
+			"\x51\xcb\x44\x54\xb0\xa7\x56\xc8\x37\x3f"
+			"\x05\x23\x82\x43\x5a\xb9\x34\x71\x8c\x95"
+			"\x51\x77\x36\x33\x89\xc0\x6b\x0b\x50\x73"
+			"\x47\x8e\x84\xd2\x53\xff\x02\xa3\xf1\xbe"
+			"\xf1\xbb\xf1\x33\x8f\x77\xf9\x2f\x02\x9f"
+			"\x63\x8a\x46\x91\xc4\x8c\x47\x0d\x30\xd2"
+			"\x30\xf0\x07\xf5\x45\xe0\x22\xf6\x6c\x78"
+			"\xa1\x30\x69\x78\x14\xaa\x55\xd2\x00\x0a"
+			"\x49\x55\x3b\xef\x35\xfa\xb5\x80\x8e\x2f"
+			"\x3c\xbb\x38\xc4\x05\x61\x1f\xa8\x14\x44"
+			"\x12\x4e\x3f\x89\xe1\xe8",
+		.expectedlen = 256,
+		.addtla = NULL,
+		.addtlb = NULL,
+		.addtllen = 0,
+		.pers = NULL,
+		.perslen = 0,
+	},
+};
+
 /*
  * SP800-90A DRBG Test vectors from
  * http://csrc.nist.gov/groups/STM/cavp/documents/drbg/drbgtestvectors.zip
@@ -21648,6 +21985,40 @@ static const struct drbg_testvec drbg_pr_hmac_sha256_tv_template[] = {
 	},
 };
 
+static const struct drbg_testvec drbg_pr_ctr_aes192_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+			"\x96\x5f\xa6\xa2\xc4\x00\x9c\x04\x5c\xff"
+			"\x72\x8f\x24\x42\x38\x26\x25\x08\xbf\x00"
+			"\x8d\xcc\xef\x30\x1d\x22\x59\x1b\x09\x78"
+			"\x73\xd1\x24\xc3\xf8\xc4\x08\xf8\x91\x61",
+		.entropylen = 40,
+		.entpra = (unsigned char *)
+			"\x97\x18\xb8\x80\x42\xa4\xb6\x07\x67\xca"
+			"\xe0\xff\xc7\x97\xe6\x88\xb0\xfe\x38\x19"
+			"\xdb\x2a\x4b\xcb",
+		.entprb = (unsigned char *)
+			"\x73\xe3\xf0\xfd\xf3\x80\xe5\xe6\x12\x6f"
+			"\xf9\xf3\xad\xb3\x4f\xf5\xbc\xc4\x5f\xba"
+			"\x0c\xe1\xd2\x48",
+		.entprlen = 24,
+		.expected = (unsigned char *)
+			"\x90\x9f\xd2\xc9\x71\x92\x1c\x77\x32\x2e"
+			"\x1d\xf2\x73\xa0\x7d\x19\xf5\x27\x13\x3e"
+			"\x56\xa9\xbe\x38\x8c\x29\x8c\xa6\x83\x08"
+			"\x73\xd1\xe8\x47\xb8\xcc\x65\x4d\xd3\xc5"
+			"\x7c\x1c\x8b\x25\xfd\x39\x09\xbe\x84\x7c"
+			"\x1a\x28\x11\x08\x94\x0f\xe7\xf0\x6d\x9d"
+			"\xb6\x0a\xd7\xb4",
+		.expectedlen = 64,
+		.addtla = NULL,
+		.addtlb = NULL,
+		.addtllen = 0,
+		.pers = NULL,
+		.perslen = 0,
+	},
+};
+
 static const struct drbg_testvec drbg_pr_ctr_aes128_tv_template[] = {
 	{
 		.entropy = (unsigned char *)
@@ -21764,6 +22135,283 @@ static const struct drbg_testvec drbg_pr_ctr_aes128_tv_template[] = {
 	},
 };
 
+static const struct drbg_testvec drbg_pr_hmac_sha1_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+					"\x68\x0f\xac\xe9\x0d\x7b\xca\x21\xd4\xa0"
+					"\xed\xb7\x79\x9e\xe5\xd8\xb7\xbe\x9e\xed"
+					"\xdd\x0e\x3b\x4b",
+		.entropylen = 24,
+		.entpra = (unsigned char *)
+					 "\x7c\xaf\xe2\x31\x63\x0a\xa9\x5a\x74\x2c"
+					 "\x4e\x5f\x5f\x22\xc6\xa4",
+		.entprb = (unsigned char *)
+					 "\x1c\x0d\x77\x92\x89\x88\x27\x94\x8a\x58"
+					 "\x9f\x82\x2d\x1a\xf7\xa6",
+		.entprlen = 16,
+		.expected = (unsigned char *)
+						"\x68\x00\x4b\x3a\x28\xf7\xf0\x1c\xf9\xe9"
+						"\xb5\x71\x20\x79\xef\x80\x87\x1b\x08\xb9"
+						"\xa9\x1b\xcd\x2b\x9f\x09\x4d\xa4\x84\x80"
+						"\xb3\x4c\xaf\xd5\x59\x6b\x0c\x0a\x48\xe1"
+						"\x48\xda\xbc\x6f\x77\xb8\xff\xaf\x18\x70"
+						"\x28\xe1\x04\x13\x7a\x4f\xeb\x1c\x72\xb0"
+						"\xc4\x4f\xe8\xb1\xaf\xab\xa5\xbc\xfd\x86"
+						"\x67\xf2\xf5\x5b\x46\x06\x63\x2e\x3c\xbc",
+		.expectedlen = 80,
+		.addtla = (unsigned char *)
+					 "\xdc\x36\x63\xf0\x62\x78\x9c\xd1\x5c\xbb"
+					 "\x20\xc3\xc1\x8c\xd9\xd7",
+		.addtlb = (unsigned char *)
+					 "\xfe\x85\xb0\xab\x14\xc6\x96\xe6\x9c\x24"
+					 "\xe7\xb5\xa1\x37\x12\x0c",
+		.addtllen = 16,
+		.pers = (unsigned char *)
+				  "\xf5\x8c\x40\xae\x70\xf7\xa5\x56\x48\xa9"
+				  "\x31\xa0\xa9\x31\x3d\xd7",
+		.perslen = 16,
+	},
+};
+
+static const struct drbg_testvec drbg_pr_hmac_sha384_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+					  "\x8b\x28\x5c\xe6\xb4\xda\x70\xc8\x3f\xd7"
+					  "\x2a\xab\x1b\x4b\xe6\x21\x01\xbf\x9b\x29"
+					  "\xe1\x68\x72\x6e\xa2\xf6\x70\xaa\xb0\xde"
+					  "\xae\xfc\x5d\xa3\x40\x4c\x49\x4c\x60\x19"
+					  "\xea\x33\x67\x9e\x37\xce\xc3\x08",
+		.entropylen = 48,
+		.entpra = (unsigned char *)
+					 "\xda\xb1\x3e\x0c\xb0\x60\xf6\x6c\x1c\x83"
+					 "\xfc\x6f\xba\x46\x47\x7d\x1a\x3c\x80\x2e"
+					 "\xdd\x75\x94\xdb\x0b\x29\x7d\xed\xb9\xcc"
+					 "\xbc\x80",
+		.entprb = (unsigned char *)
+					 "\x0c\x81\x7f\x05\x65\x8f\xb9\xb4\xc9\x99"
+					 "\x38\xae\x21\x40\x16\x0c\x4a\x16\xd5\x48"
+					 "\x63\x4a\x35\x3b\xc2\x85\xcb\x38\xd0\xe9"
+					 "\x32\x43",
+		.entprlen = 32,
+		.expected = (unsigned char *)
+						"\x51\xe0\x42\xdd\x56\xa1\x93\x90\x8c\x90"
+						"\x18\xc2\x5f\x1c\x1a\x8b\x5e\x27\x34\xb0"
+						"\x55\xc3\xb7\xfd\xe6\xa8\xba\x9e\xc2\xb9"
+						"\x59\x34\x9d\xf2\x92\x95\xab\xb0\xa2\x4b"
+						"\x47\x15\xf9\x8d\x31\xde\x0a\x36\x9e\x62"
+						"\x62\xc2\xb2\xcd\x49\xc5\x46\x2b\x7a\xe2"
+						"\x84\xe9\x21\xf5\xad\x2e\xc0\x13\xed\xc1"
+						"\x61\x13\x43\xc2\x28\x68\x3f\x41\x70\xf3"
+						"\x4a\x75\x85\x4b\x1b\x65\x6d\x22\x6e\x29"
+						"\x41\x72\xd4\x88\xc1\x0a\x41\x5f\x09\xde"
+						"\xe7\x09\x84\xb9\xc4\x9e\x8d\x36\x86\x31"
+						"\x92\x30\x1d\x17\x62\x14\x5e\x0d\x9e\x94"
+						"\xe9\x9b\xd3\x0c\xe8\x49\x04\x38\xed\x05"
+						"\x0f\x41\x8c\xf4\xba\x0b\x07\xfe\x90\xa8"
+						"\x2d\x1c\xcf\x38\x57\x8d\x99\xed\xf0\x51"
+						"\x8c\x4a\x75\x8a\x19\x9d\xb4\xd3\x53\x3c"
+						"\x4d\xbc\x55\xb1\xda\x19\x84\x0b\x8f\x36"
+						"\x5a\x57\x4a\xa0\x16\x47\x81\x90\x32\xdc"
+						"\x0a\xd6\x41\x38\x8c\x20\x93\xeb\xd4\xab"
+						"\x5d\x99",
+		.expectedlen = 192,
+		.addtla = (unsigned char *)
+					 "\x88\x1a\x18\x74\xc8\x00\xdb\x06\x8b\x59"
+					 "\x13\xd1\x95\x05\x8d\x07\x26\x45\x8d\xe3"
+					 "\x78\x2f\xf5\x30\xaf\x1a\x76\x1f\x96\x28"
+					 "\x54\x7f",
+		.addtlb = (unsigned char *)
+					 "\x0c\x27\xcf\x27\x1b\xd7\x93\x1d\x18\x7e"
+					 "\xc6\xf5\x60\x38\x51\x96\x74\x46\x8f\xa2"
+					 "\xe7\xe6\xf9\x94\x90\x4c\x9f\x1a\xfa\x34"
+					 "\x69\x39",
+		.addtllen = 32,
+		.pers = (unsigned char *)
+				  "\x72\x3c\x0f\x28\x7d\xb4\xaf\x28\x5c\x19"
+				  "\x5c\xeb\xb1\x10\x4a\x10\x6f\x22\xe8\xb2"
+				  "\x43\xfd\xcd\x05\x66\x22\x8a\xb5\xf2\x27"
+				  "\xa9\xe3",
+		.perslen = 32,
+	},
+};
+
+static const struct drbg_testvec drbg_pr_hmac_sha512_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+					  "\x3a\xca\x6b\x55\x56\x15\x21\x00\x7c\x9e"
+					  "\xce\x08\x5e\x9a\x66\x35\xe3\x46\xfa\x80"
+					  "\x43\x35\xd6\xad\x42\xeb\xd6\x81\x4c\x01"
+					  "\x7f\xa8\xaa\x7f\xd3\xc3\xdd\x5d\x03\xd9"
+					  "\xb8\xef\xc7\xf7\x05\x74\x58\x1f",
+		.entropylen = 48,
+		.entpra = (unsigned char *)
+					 "\x4c\xc1\x9f\xae\x5a\x45\x6f\x8a\x53\xa6"
+					 "\x56\xd2\x3a\x0b\x66\x5d\x6d\xdf\x7f\x43"
+					 "\x02\x0a\x5f\xeb\xbb\x55\x27\x14\xe4\x47"
+					 "\x56\x5d",
+		.entprb = (unsigned char *)
+					 "\x63\x73\x86\xb3\xab\x33\xf7\x8f\xd9\x75"
+					 "\x1c\x7b\x7e\x67\xe1\xe1\x5f\x6e\x50\xdd"
+					 "\xc5\x48\xa1\xeb\x58\x13\xf6\xd0\xd4\x83"
+					 "\x81\xbf",
+		.entprlen = 32,
+		.expected = (unsigned char *)
+						"\x54\x66\x64\x04\x2b\xef\x33\x06\x4d\xa2"
+						"\x8a\x57\x18\xf2\xc2\xe5\xf7\x2d\x77\x25"
+						"\xe3\xfb\xe8\x7a\xd2\xee\x90\xfb\xfe\x6c"
+						"\x11\x4e\xd3\x64\x40\xfb\xbc\xcf\x29\x69"
+						"\x8b\x43\x60\xbc\x4a\xd7\x46\x50\xde\x13"
+						"\x82\x58\x38\x10\x6a\xdc\x53\x00\x2b\xc3"
+						"\x89\xee\x90\x06\x91\x64\x9b\x97\x2f\x31"
+						"\x87\xb8\x4d\x05\xce\xcc\x8f\xd0\x34\x49"
+						"\x7d\xd9\x9c\x6c\x99\x7d\x19\x14\xb4\xef"
+						"\x83\x8d\x84\xab\xf2\x3f\xae\x7f\x3a\xc9"
+						"\xef\xdc\xdc\x04\xc0\x03\xac\x64\x2c\x51"
+						"\x26\xb0\x0f\x9f\x24\xbf\x14\x31\xa4\xf1"
+						"\x9e\xf0\xb5\xf3\xd2\x30\xaa\xb3\xfd\xf0"
+						"\x91\xba\x31\xb7\xdd\xca\xcd\xf2\x56\x6f"
+						"\x2c\xfa\xb3\x0f\x55\xb3\x12\x3e\x73\x38"
+						"\x29\xb6\x97\xb7\xc8\xb2\x48\x42\x0a\xb9"
+						"\x8b\xa6\xf1\x1b\x01\x71\x75\x25\x63\x68"
+						"\xe8\xd8\x36\x11\x02\xc9\xe6\xd5\x73\x86"
+						"\xbe\xcb\xea\xbd\xa0\x92\xdd\x57\xae\xc6"
+						"\x5b\xc2\x0e\xbe\xe7\x8e\xea\x72\x94\x57"
+						"\x1e\x16\x8c\x45\x40\x66\xd2\x56\xb8\x1b"
+						"\xb8\xb7\xbb\x46\x92\x07\xa1\x8e\xbe\xdb"
+						"\xb4\x34\x8f\xbe\x97\xa4\xd8\x6d\x2b\xd0"
+						"\x95\xc4\x1f\x6d\xe5\x9a\xa0\x80\x0e\x13"
+						"\x1e\x98\x18\x18\x86\xa2\x63\x3c\xdc\xc5"
+						"\x50\x91\x4d\x83\xb3\x27",
+		.expectedlen = 256,
+		.addtla = (unsigned char *)
+					 "\xb3\x9c\x43\x53\x9f\xdc\x24\x34\x30\x85"
+					 "\xcb\xb6\x5b\x8d\x36\xc5\x47\x32\x47\x6d"
+					 "\x78\x11\x04\xc3\x55\xc3\x91\xa9\x51\x31"
+					 "\x3a\x30",
+		.addtlb = (unsigned char *)
+					 "\xb6\x85\x0e\xdd\x46\x22\x67\x5e\xf5\xa5"
+					 "\x07\xea\xb9\x11\xe2\x49\xd6\x3f\xcf\x62"
+					 "\xf3\x30\xcc\x8a\x16\xbb\x2c\xcc\x58\x58"
+					 "\xde\x5d",
+		.addtllen = 32,
+		.pers = (unsigned char *)
+				  "\x4b\xc9\xa4\x85\xec\x84\x0d\x37\x7a\xe4"
+				  "\x50\x4a\xa1\xdf\x41\xe4\x44\xc4\x23\x16"
+				  "\x87\xf3\xd7\x85\x1c\x26\xc2\x75\xbc\x68"
+				  "\x74\x63",
+		.perslen = 32,
+	},
+};
+
+static const struct drbg_testvec drbg_nopr_sha1_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+			"\x13\x6c\xf1\xc1\x74\xe5\xa0\x9f\x66\xb9"
+			"\x62\xd9\x94\x39\x65\x25\xff\xf1\xc6\x64"
+			"\x5f\x19\x23\x1f",
+		.entropylen = 24,
+		.expected = (unsigned char *)
+			"\x0e\x28\x13\x0f\xa5\xca\x11\xed\xd3\x29"
+			"\x3c\xa2\x6f\xdb\x8a\xe1\x81\x06\x11\xf7"
+			"\x87\x15\x08\x2e\xd3\x84\x1e\x74\x86\xf1"
+			"\x66\x77\xb2\x8e\x33\xff\xe0\xb9\x3d\x98"
+			"\xba\x57\xba\x35\x8c\x13\x43\xab\x2a\x26"
+			"\xb4\xeb\x79\x40\xf5\xbc\x63\x93\x84\x64"
+			"\x1e\xe8\x0a\x25\x14\x03\x31\x07\x62\x68"
+			"\xbd\x1c\xe7\x02\xad\x53\x4d\xda\x0e\xd8",
+		.expectedlen = 80,
+		.addtla = NULL,
+		.addtlb = NULL,
+		.addtllen = 0,
+		.pers = NULL,
+		.perslen = 0,
+	},
+};
+
+static const struct drbg_testvec drbg_nopr_sha384_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+			"\x9e\xf0\xb0\x03\x81\xd6\xc8\xc5\x4d\x08"
+			"\xfc\xad\xc6\xf5\xef\x33\x11\x34\xbb\x98"
+			"\x63\x73\xf6\x5c\x6a\x14\xf5\x53\xbc\xb6"
+			"\xc5\x5d\x9f\xce\x26\xad\xa7\xb1\xde\x39"
+			"\x59\x03\x12\xbd\x9d\x81\xc4\xf5",
+		.entropylen = 48,
+		.expected = (unsigned char *)
+			"\x66\x3f\xfb\x62\x5e\x62\xc4\xeb\x67\xd7"
+			"\x17\x7a\x6a\xbb\x80\x8a\x9f\x68\xc2\xd5"
+			"\x84\x0f\x19\x99\x2c\x11\xea\x3a\x63\x5d"
+			"\x05\xb5\x37\xfa\xe1\xf1\x74\x6c\x13\x14"
+			"\xe1\xa7\x5e\x14\x1c\x2e\x09\x41\x87\xd1"
+			"\x7b\x9d\xaa\xe1\x44\x2e\x41\xd3\xa0\xd1"
+			"\xfe\xa9\x4d\x8e\xf9\xd8\x40\x11\x13\x79"
+			"\xa5\x2e\x6c\x7f\xfa\xfa\x7e\xe8\x3b\x24"
+			"\x4c\xed\x12\x96\x13\xd5\xb8\xbb\x08\x9e"
+			"\x7e\xa2\x5d\xe1\xc2\x98\x97\x73\x5c\xf9"
+			"\x56\x95\x04\x3a\x64\x8a\x2e\xf6\xfd\x4a"
+			"\xa7\x4c\xe8\x32\x8a\x55\x50\xda\x8d\xdb"
+			"\x51\xf9\x8a\xdc\xdc\x10\x8e\x45\x56\x03"
+			"\xf6\xf1\x8f\x5a\x50\x01\x6f\x3e\x8e\xbc"
+			"\xb2\x44\xa1\x6b\xc6\xb6\xe5\x54\xa7\x54"
+			"\x61\x53\xc1\x2f\x52\x2c\x75\xca\x5f\x10"
+			"\x17\xe0\x1d\xa3\x66\x50\xe6\x20\x3f\x30"
+			"\xed\x5c\x3d\xa3\xb6\x07\x87\x36\x46\x5e"
+			"\xec\xb4\x00\xee\xaa\xa2\xc8\x76\xe3\x75"
+			"\x64\xd8",
+		.expectedlen = 192,
+		.addtla = NULL,
+		.addtlb = NULL,
+		.addtllen = 0,
+		.pers = NULL,
+		.perslen = 0,
+	},
+};
+
+static const struct drbg_testvec drbg_nopr_sha512_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+			"\x6b\x50\xa7\xd8\xf8\xa5\x5d\x7a\x3d\xf8"
+			"\xbb\x40\xbc\xc3\xb7\x22\xd8\x70\x8d\xe6"
+			"\x7f\xda\x01\x0b\x03\xc4\xc8\x4d\x72\x09"
+			"\x6f\x8c\x3e\xc6\x49\xcc\x62\x56\xd9\xfa"
+			"\x31\xdb\x7a\x29\x04\xaa\xf0\x25",
+		.entropylen = 48,
+		.expected = (unsigned char *)
+			"\x95\xb7\xf1\x7e\x98\x02\xd3\x57\x73\x92"
+			"\xc6\xa9\xc0\x80\x83\xb6\x7d\xd1\x29\x22"
+			"\x65\xb5\xf4\x2d\x23\x7f\x1c\x55\xbb\x9b"
+			"\x10\xbf\xcf\xd8\x2c\x77\xa3\x78\xb8\x26"
+			"\x6a\x00\x99\x14\x3b\x3c\x2d\x64\x61\x1e"
+			"\xee\xb6\x9a\xcd\xc0\x55\x95\x7c\x13\x9e"
+			"\x8b\x19\x0c\x7a\x06\x95\x5f\x2c\x79\x7c"
+			"\x27\x78\xde\x94\x03\x96\xa5\x01\xf4\x0e"
+			"\x91\x39\x6a\xcf\x8d\x7e\x45\xeb\xdb\xb5"
+			"\x3b\xbf\x8c\x97\x52\x30\xd2\xf0\xff\x91"
+			"\x06\xc7\x61\x19\xae\x49\x8e\x7f\xbc\x03"
+			"\xd9\x0f\x8e\x4c\x51\x62\x7a\xed\x5c\x8d"
+			"\x42\x63\xd5\xd2\xb9\x78\x87\x3a\x0d\xe5"
+			"\x96\xee\x6d\xc7\xf7\xc2\x9e\x37\xee\xe8"
+			"\xb3\x4c\x90\xdd\x1c\xf6\xa9\xdd\xb2\x2b"
+			"\x4c\xbd\x08\x6b\x14\xb3\x5d\xe9\x3d\xa2"
+			"\xd5\xcb\x18\x06\x69\x8c\xbd\x7b\xbb\x67"
+			"\xbf\xe3\xd3\x1f\xd2\xd1\xdb\xd2\xa1\xe0"
+			"\x58\xa3\xeb\x99\xd7\xe5\x1f\x1a\x93\x8e"
+			"\xed\x5e\x1c\x1d\xe2\x3a\x6b\x43\x45\xd3"
+			"\x19\x14\x09\xf9\x2f\x39\xb3\x67\x0d\x8d"
+			"\xbf\xb6\x35\xd8\xe6\xa3\x69\x32\xd8\x10"
+			"\x33\xd1\x44\x8d\x63\xb4\x03\xdd\xf8\x8e"
+			"\x12\x1b\x6e\x81\x9a\xc3\x81\x22\x6c\x13"
+			"\x21\xe4\xb0\x86\x44\xf6\x72\x7c\x36\x8c"
+			"\x5a\x9f\x7a\x4b\x3e\xe2",
+		.expectedlen = 256,
+		.addtla = NULL,
+		.addtlb = NULL,
+		.addtllen = 0,
+		.pers = NULL,
+		.perslen = 0,
+	},
+};
+
 /*
  * SP800-90A DRBG Test vectors from
  * http://csrc.nist.gov/groups/STM/cavp/documents/drbg/drbgtestvectors.zip
@@ -21894,6 +22542,115 @@ static const struct drbg_testvec drbg_nopr_sha256_tv_template[] = {
 	},
 };
 
+static const struct drbg_testvec drbg_nopr_hmac_sha1_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+			"\xe9\x1b\x63\x30\x9e\x93\xd1\xd0\x8e\x30"
+			"\xe8\xd5\x56\x90\x68\x75\xf5\x97\x47\xc4"
+			"\x68\xb0\xd0\xda",
+		.entropylen = 24,
+		.expected = (unsigned char *)
+			"\xb7\x92\x8f\x95\x03\xa4\x17\x11\x07\x88"
+			"\xf9\xd0\xc2\x58\x5f\x8a\xee\x6f\xb7\x3b"
+			"\x22\x0a\x62\x6b\x3a\xb9\x82\x5b\x7a\x9f"
+			"\xac\xc7\x97\x23\xd7\xe1\xba\x92\x55\xe4"
+			"\x0e\x65\xc2\x49\xb6\x08\x2a\x7b\xc5\xe3"
+			"\xf1\x29\xd3\xd8\xf6\x9b\x04\xed\x11\x83"
+			"\x41\x9d\x6c\x4f\x2a\x13\xb3\x04\xd2\xc5"
+			"\x74\x3f\x41\xc8\xb0\xee\x73\x22\x53\x47",
+		.expectedlen = 80,
+		.addtla = NULL,
+		.addtlb = NULL,
+		.addtllen = 0,
+		.pers = NULL,
+		.perslen = 0,
+	},
+};
+
+static const struct drbg_testvec drbg_nopr_hmac_sha384_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+			"\xa1\xdc\x2d\xfe\xda\x4f\x3a\x11\x24\xe0"
+			"\xe7\x5e\xbf\xbe\x5f\x98\xca\xc1\x10\x18"
+			"\x22\x1d\xda\x3f\xdc\xf8\xf9\x12\x5d\x68"
+			"\x44\x7a\xba\xe5\xea\x27\x16\x65\x40\x51"
+			"\x52\x68\xa4\x93\xa9\x6b\x51\x87",
+		.entropylen = 48,
+		.expected = (unsigned char *)
+			"\x22\x82\x93\xe5\x9b\x1e\x45\x45\xa4\xff"
+			"\x9f\x23\x26\x16\xfc\x51\x08\xa1\x12\x8d"
+			"\xeb\xd0\xf7\xc2\x0a\xce\x83\x7c\xa1\x05"
+			"\xcb\xf2\x4c\x0d\xac\x1f\x98\x47\xda\xfd"
+			"\x0d\x05\x00\x72\x1f\xfa\xd3\xc6\x84\xa9"
+			"\x92\xd1\x10\xa5\x49\xa2\x64\xd1\x4a\x89"
+			"\x11\xc5\x0b\xe8\xcd\x6a\x7e\x8f\xac\x78"
+			"\x3a\xd9\x5b\x24\xf6\x4f\xd8\xcc\x4c\x8b"
+			"\x64\x9e\xac\x2b\x15\xb3\x63\xe3\x0d\xf7"
+			"\x95\x41\xa6\xb8\xa1\xca\xac\x23\x89\x49"
+			"\xb4\x66\x43\x69\x4c\x85\xe1\xd5\xfc\xbc"
+			"\xd9\xaa\xae\x62\x60\xac\xee\x66\x0b\x8a"
+			"\x79\xbe\xa4\x8e\x07\x9c\xeb\x6a\x5e\xaf"
+			"\x49\x93\xa8\x2c\x3f\x1b\x75\x8d\x7c\x53"
+			"\xe3\x09\x4e\xea\xc6\x3d\xc2\x55\xbe\x6d"
+			"\xcd\xcc\x2b\x51\xe5\xca\x45\xd2\xb2\x06"
+			"\x84\xa5\xa8\xfa\x58\x06\xb9\x6f\x84\x61"
+			"\xeb\xf5\x1b\xc5\x15\xa7\xdd\x8c\x54\x75"
+			"\xc0\xe7\x0f\x2f\xd0\xfa\xf7\x86\x9a\x99"
+			"\xab\x6c",
+		.expectedlen = 192,
+		.addtla = NULL,
+		.addtlb = NULL,
+		.addtllen = 0,
+		.pers = NULL,
+		.perslen = 0,
+	},
+};
+
+static const struct drbg_testvec drbg_nopr_hmac_sha512_tv_template[] = {
+	{
+		.entropy = (unsigned char *)
+			"\x35\x04\x9f\x38\x9a\x33\xc0\xec\xb1\x29"
+			"\x32\x38\xfd\x95\x1f\x8f\xfd\x51\x7d\xfd"
+			"\xe0\x60\x41\xd3\x29\x45\xb3\xe2\x69\x14"
+			"\xba\x15\xf7\x32\x87\x60\xbe\x61\x68\xe6"
+			"\xaa\x9f\xb5\x47\x84\x98\x9a\x11",
+		.entropylen = 48,
+		.expected = (unsigned char *)
+			"\xe7\x64\x91\xb0\x26\x0a\xac\xfd\xed\x01"
+			"\xad\x39\xfb\xf1\xa6\x6a\x88\x28\x4c\xaa"
+			"\x51\x23\x36\x8a\x2a\xd9\x33\x0e\xe4\x83"
+			"\x35\xe3\xc9\xc9\xba\x90\xe6\xcb\xc9\x42"
+			"\x99\x62\xd6\x0c\x1a\x66\x61\xed\xcf\xaa"
+			"\x31\xd9\x72\xb8\x26\x4b\x9d\x45\x62\xcf"
+			"\x18\x49\x41\x28\xa0\x92\xc1\x7a\x8d\xa6"
+			"\xf3\x11\x3e\x8a\x7e\xdf\xcd\x44\x27\x08"
+			"\x2b\xd3\x90\x67\x5e\x96\x62\x40\x81\x44"
+			"\x97\x17\x17\x30\x3d\x8d\xc3\x52\xc9\xe8"
+			"\xb9\x5e\x7f\x35\xfa\x2a\xc9\xf5\x49\xb2"
+			"\x92\xbc\x7c\x4b\xc7\xf0\x1e\xe0\xa5\x77"
+			"\x85\x9e\xf6\xe8\x2d\x79\xef\x23\x89\x2d"
+			"\x16\x7c\x14\x0d\x22\xaa\xc3\x2b\x64\xcc"
+			"\xdf\xee\xe2\x73\x05\x28\xa3\x87\x63\xb2"
+			"\x42\x27\xf9\x1a\xc3\xff\xe4\x7f\xb1\x15"
+			"\x38\xe4\x35\x30\x7e\x77\x48\x18\x02\xb0"
+			"\xf6\x13\xf3\x70\xff\xb0\xdb\xea\xb7\x74"
+			"\xfe\x1e\xfb\xb1\xa8\x0d\x01\x15\x4a\x94"
+			"\x59\xe7\x3a\xd3\x61\x10\x8b\xbc\x86\xb0"
+			"\x91\x4f\x09\x51\x36\xcb\xe6\x34\x55\x5c"
+			"\xe0\xbb\x26\x36\x18\xdc\x5c\x36\x72\x91"
+			"\xce\x08\x25\x51\x89\x87\x15\x4f\xe9\xec"
+			"\xb0\x52\xb3\xf0\xa2\x56\xfc\xc3\x0c\xc1"
+			"\x45\x72\x53\x1c\x96\x28\x97\x36\x39\xbe"
+			"\xda\x45\x6f\x2b\xdd\xf6",
+		.expectedlen = 256,
+		.addtla = NULL,
+		.addtlb = NULL,
+		.addtllen = 0,
+		.pers = NULL,
+		.perslen = 0,
+	},
+};
+
 static const struct drbg_testvec drbg_nopr_hmac_sha256_tv_template[] = {
 	{
 		.entropy = (unsigned char *)
-- 
2.11.0

