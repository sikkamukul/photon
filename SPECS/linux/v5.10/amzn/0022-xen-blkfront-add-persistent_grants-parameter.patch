From 4d79d1b52e03fd282d7ea1036d5df51a28e0c528 Mon Sep 17 00:00:00 2001
From: Anthony Liguori <aliguori@amazon.com>
Date: Tue, 26 Apr 2016 22:04:13 +0000
Subject: [PATCH] xen-blkfront: add 'persistent_grants' parameter

Persistent grants make it far more likely to exhaust domain-0's grant
table entries particularily with a high number of devices across a
high number of domains.

It is useful for an instance to be able to control disabling this
feature to help mitigate against grant starvation.

Forward port: For 4.14.y linux kernel, we are no longer using out
of tree xen blockfront driver. This patch has been ported on intree
xen blockfront driver.
For reference:
Original CR: https://cr.amazon.com/r/5182736/

Reviewed-by: Eduardo Valentin <eduval@amazon.com>
Reviewed-by: Munehisa Kamata <kamatam@amazon.com>
Reviewed-by: Anchal Agarwal <anchalag@amazon.com>
Signed-off-by: Anthony Liguori <aliguori@amazon.com>
Signed-off-by: Cristian Gafton <gafton@amazon.com>
Signed-off-by: Munehisa Kamata <kamatam@amazon.com>
Signed-off-by: Vallish Vaidyeshwara <vallish@amazon.com>

CR: https://cr.amazon.com/r/8309443
Signed-off-by: srinidhira0 <srinidhir@vmware.com>
---
 drivers/block/xen-blkfront.c | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/drivers/block/xen-blkfront.c b/drivers/block/xen-blkfront.c
index 7fdf505022bb..0aad0938e685 100644
--- a/drivers/block/xen-blkfront.c
+++ b/drivers/block/xen-blkfront.c
@@ -147,6 +147,10 @@ static unsigned int xen_blkif_max_queues = 4;
 module_param_named(max_queues, xen_blkif_max_queues, uint, 0444);
 MODULE_PARM_DESC(max_queues, "Maximum number of hardware queues/rings used per virtual disk");
 
+static unsigned int xen_blkif_feature_persistent = 1;
+module_param_named(persistent_grants, xen_blkif_feature_persistent, int, S_IRUGO);
+MODULE_PARM_DESC(persistent_grants, "Enable persistent grant table references (default is 1)");
+
 /*
  * Maximum order of pages to be used for the shared ring between front and
  * backend, 4KB page granularity is used.
@@ -1919,7 +1923,7 @@ static int talk_to_blkback(struct xenbus_device *dev,
 		goto destroy_blkring;
 	}
 
-	if (info->nr_ring_pages > 1) {
+	if (info->nr_ring_pages > 1 && xen_blkif_feature_persistent) {
 		err = xenbus_printf(xbt, dev->nodename, "ring-page-order", "%u",
 				    ring_page_order);
 		if (err) {
@@ -2395,10 +2395,13 @@ static void blkfront_gather_backend_features(struct blkfront_info *info)
 	if (xenbus_read_unsigned(info->xbdev->otherend, "feature-discard", 0))
 		blkfront_setup_discard(info);
 
-	if (info->feature_persistent_parm)
+	if (info->feature_persistent_parm || xen_blkif_feature_persistent)
 		info->feature_persistent =
 			!!xenbus_read_unsigned(info->xbdev->otherend,
 					       "feature-persistent", 0);
+	else
+		info->feature_persistent = 0;
+
 	if (info->feature_persistent)
 		info->bounce = true;
 
-- 
2.23.3

