From b5ff8f9d90279261986f14dbd3a876a4850dafdf Mon Sep 17 00:00:00 2001
From: "Srivatsa S. Bhat (VMware)" <srivatsa@csail.mit.edu>
Date: Wed, 12 Oct 2022 12:36:59 -0700
Subject: [PATCH] iavf: Make iavf driver honor default and user-defined IRQ
 affinities

The iavf driver completely ignores the default system-wide IRQ
affinity (set via the irqaffinity= kernel cmdline parameter) and
spreads its interrupts across all online CPUs instead.

Furthermore, if a user/administrator (or a service such as tuned or
irqbalance) overrides the default IRQ affinity for the iavf driver's
interrupts using the per-IRQ procfs interface (eg: by writing the
desired cpulist to /proc/irq/<IRQ>/smp_affinity_list), the driver is
supposed to remember this setting (as indicated by the
IRQD_AFFINITY_SET flag) and restore it if the underlying device gets
bounced or reinitialized (eg: ifconfig <NIC> down; ifconfig <NIC> up).
Instead, the iavf driver once again spreads its interrupts across all
online CPUs, and thus fails to honor the user-defined IRQ affinities
as well.

The underlying root-cause for both of these issues is the incorrect
use of the irq_set_affinity_hint() API in the driver's interrupt
request code-path at the time of probe. The driver calls this API with
the affinity mask set to all online CPUs, which ends up getting
remembered as the user-defined IRQ affinity (overriding both the
default system-wide IRQ affinity as well as the user's actual IRQ
affinity setting).

Fix this by removing the call to irq_set_affinity_hint() in the
driver's initialization code.

Signed-off-by: Sharan Turlapati <sturlapati@vmware.com>
Signed-off-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
---
 src/iavf_main.c | 15 ---------------
 1 file changed, 15 deletions(-)

diff --git a/src/iavf_main.c b/src/iavf_main.c
index 8ac0e18..3dc7e66 100644
--- a/src/iavf_main.c
+++ b/src/iavf_main.c
@@ -500,7 +500,6 @@ iavf_request_traffic_irqs(struct iavf_adapter *adapter, char *basename)
 	unsigned int vector, q_vectors;
 	unsigned int rx_int_idx = 0, tx_int_idx = 0;
 	int irq_num, err;
-	int cpu;
 
 	iavf_irq_disable(adapter);
 	/* Decrement for Other and TCP Timer vectors */
@@ -541,14 +540,6 @@ iavf_request_traffic_irqs(struct iavf_adapter *adapter, char *basename)
 						   iavf_irq_affinity_release;
 		irq_set_affinity_notifier(irq_num, &q_vector->affinity_notify);
 #endif
-#ifdef HAVE_IRQ_AFFINITY_HINT
-		/* Spread the IRQ affinity hints across online CPUs. Note that
-		 * get_cpu_mask returns a mask with a permanent lifetime so
-		 * it's safe to use as a hint for irq_set_affinity_hint.
-		 */
-		cpu = cpumask_local_spread(q_vector->v_idx, -1);
-		irq_set_affinity_hint(irq_num, get_cpu_mask(cpu));
-#endif /* HAVE_IRQ_AFFINITY_HINT */
 	}
 
 	return 0;
@@ -559,9 +550,6 @@ free_queue_irqs:
 		irq_num = adapter->msix_entries[vector + NONQ_VECS].vector;
 #ifdef HAVE_IRQ_AFFINITY_NOTIFY
 		irq_set_affinity_notifier(irq_num, NULL);
-#endif
-#ifdef HAVE_IRQ_AFFINITY_HINT
-		irq_set_affinity_hint(irq_num, NULL);
 #endif
 		free_irq(irq_num, &adapter->q_vectors[vector]);
 	}
@@ -615,9 +603,6 @@ static void iavf_free_traffic_irqs(struct iavf_adapter *adapter)
 		irq_num = adapter->msix_entries[vector + NONQ_VECS].vector;
 #ifdef HAVE_IRQ_AFFINITY_NOTIFY
 		irq_set_affinity_notifier(irq_num, NULL);
-#endif
-#ifdef HAVE_IRQ_AFFINITY_HINT
-		irq_set_affinity_hint(irq_num, NULL);
 #endif
 		free_irq(irq_num, &adapter->q_vectors[vector]);
 	}
-- 
2.25.1
