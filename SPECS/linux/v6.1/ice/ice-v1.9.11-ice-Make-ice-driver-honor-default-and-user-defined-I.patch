From 2b135a07130ef51c2b5e3095c1b8a1d66d5a249c Mon Sep 17 00:00:00 2001
From: "Srivatsa S. Bhat (VMware)" <srivatsa@csail.mit.edu>
Date: Wed, 12 Oct 2022 12:41:14 -0700
Subject: [PATCH] ice: Make ice driver honor default and user-defined IRQ
 affinities

The ice driver completely ignores the default system-wide IRQ
affinity (set via the irqaffinity= kernel cmdline parameter) and
spreads its interrupts across all online CPUs instead.

Furthermore, if a user/administrator (or a service such as tuned or
irqbalance) overrides the default IRQ affinity for the ice driver's
interrupts using the per-IRQ procfs interface (eg: by writing the
desired cpulist to /proc/irq/<IRQ>/smp_affinity_list), the driver is
supposed to remember this setting (as indicated by the
IRQD_AFFINITY_SET flag) and restore it if the underlying device gets
bounced or reinitialized (eg: ifconfig <NIC> down; ifconfig <NIC> up).
Instead, the ice driver once again spreads its interrupts across all
online CPUs, and thus fails to honor the user-defined IRQ affinities
as well.

The underlying root-cause for both of these issues is the incorrect
use of the irq_set_affinity_hint() API in the driver's interrupt
request code-path at the time of probe. The driver calls this API with
the affinity mask set to all online CPUs, which ends up getting
remembered as the user-defined IRQ affinity (overriding both the
default system-wide IRQ affinity as well as the user's actual IRQ
affinity setting).

Fix this by removing the call to irq_set_affinity_hint() in the
driver's initialization code.

Signed-off-by: Sharan Turlapati <sturlapati@vmware.com>
Signed-off-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
---
 src/ice_lib.c  | 2 --
 src/ice_main.c | 3 ---
 2 files changed, 5 deletions(-)

diff --git a/src/ice_lib.c b/src/ice_lib.c
index e47d255..0293d33 100644
--- a/src/ice_lib.c
+++ b/src/ice_lib.c
@@ -3032,8 +3032,6 @@ void ice_vsi_free_irq(struct ice_vsi *vsi)
 		/* clear the affinity notifier in the IRQ descriptor */
 		irq_set_affinity_notifier(irq_num, NULL);
 
-		/* clear the affinity_mask in the IRQ descriptor */
-		irq_set_affinity_hint(irq_num, NULL);
 		synchronize_irq(irq_num);
 		devm_free_irq(ice_pf_to_dev(pf), irq_num, vsi->q_vectors[i]);
 	}
diff --git a/src/ice_main.c b/src/ice_main.c
index 6aaddd0..a2272a5 100644
--- a/src/ice_main.c
+++ b/src/ice_main.c
@@ -3498,8 +3498,6 @@ static int ice_vsi_req_irq_msix(struct ice_vsi *vsi, char *basename)
 			irq_set_affinity_notifier(irq_num, affinity_notify);
 		}
 
-		/* assign the mask for this irq */
-		irq_set_affinity_hint(irq_num, &q_vector->affinity_mask);
 	}
 
 	vsi->irqs_ready = true;
@@ -3511,7 +3509,6 @@ free_q_irqs:
 		irq_num = ice_get_irq_num(pf, base + vector);
 		if (!IS_ENABLED(CONFIG_RFS_ACCEL))
 			irq_set_affinity_notifier(irq_num, NULL);
-		irq_set_affinity_hint(irq_num, NULL);
 		devm_free_irq(dev, irq_num, &vsi->q_vectors[vector]);
 	}
 	return err;
-- 
2.23.1
