commit aeb5246fc84c0d452ac34f3106e8cda72ceb079b
Author: Keerthana K <keerthanak@vmware.com>
Date:   Tue Nov 19 13:48:23 2019 +0530

    Changes include:
    
    1. Modified Kernel crypto testmgr to break KAT fips tests for algorithms supported in photon
    2. Added kernel cmdline parameter "katbuild". This parameter is used to
    break a particular algorithm in fips power on self tests. you can specify values [1,2,3...19]
    each value corresponds to an algorithm for which the test vectors are tampered.
    
    Signed-off-by: Keerthana K <keerthanak@vmware.com>

diff --git a/crypto/testmgr.c b/crypto/testmgr.c
index 3664c26..070fdc0 100644
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@ -34,6 +34,7 @@
 #include <crypto/akcipher.h>
 #include <crypto/kpp.h>
 #include <crypto/acompress.h>
+#include <linux/string.h>
 
 #include "internal.h"
 
@@ -41,6 +42,18 @@ static bool notests;
 module_param(notests, bool, 0644);
 MODULE_PARM_DESC(notests, "disable crypto self-tests");
 
+int kat_testbuild;
+
+/* Process kernel command-line parameter at boot time. katbuild=1 katbuild=2 etc */
+static int kat_test(char *str)
+{
+	kat_testbuild = simple_strtol(str, NULL, 0);
+	printk(KERN_INFO "kat build : %d\n", kat_testbuild);
+	return 1;
+}
+
+__setup("katbuild=", kat_test);
+
 #ifdef CONFIG_CRYPTO_MANAGER_DISABLE_TESTS
 
 /* a perfect nop */
@@ -3673,6 +3686,9 @@ int alg_test(const char *driver, const char *alg, u32 type, u32 mask)
 	int i;
 	int j;
 	int rc;
+	char *alg_list[] = {"cbc(aes)", "ecb(aes)", "xts(aes)", "ctr(aes)", "cbc(des3_ede)", "ecb(des3_ede)", "hmac(sha1)", "hmac(sha224)", "hmac(sha256)", "hmac(sha384)", "hmac(sha512)", "rsa", "pkcs1pad(rsa,sha256)", "drbg_pr_ctr_aes128", "drbg_pr_hmac_sha256", "drbg_nopr_ctr_aes256", "drbg_nopr_hmac_sha256", "ecdh"};
+	char *test = "\x23\x32\x23\x32\x23\x32\x23\x32";
+	char *result = NULL;
 
 	if (!fips_enabled && notests) {
 		printk_once(KERN_INFO "alg: self-tests disabled\n");
@@ -3708,6 +3724,136 @@ int alg_test(const char *driver, const char *alg, u32 type, u32 mask)
 			     (j >= 0 && !alg_test_descs[j].fips_allowed)))
 		goto non_fips_alg;
 
+	if (fips_enabled) {
+		switch(kat_testbuild)
+		{
+			case 1:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(aes_cbc_tv_template[2].ctext, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					aes_cbc_tv_template[2].ctext = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 2:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(aes_tv_template[3].ctext, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					aes_tv_template[3].ctext = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 3:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(aes_xts_tv_template[4].ctext, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					aes_xts_tv_template[4].ctext = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 4:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(aes_ctr_tv_template[2].ctext, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					aes_ctr_tv_template[2].ctext = kstrdup(result, GFP_KERNEL);
+				}
+			case 5:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(des3_ede_cbc_tv_template[0].ctext, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					des3_ede_cbc_tv_template[0].ctext = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 6:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(des3_ede_tv_template[0].ctext, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					des3_ede_tv_template[0].ctext = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 7:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(hmac_sha1_tv_template[0].digest, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					hmac_sha1_tv_template[0].digest = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 8:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(hmac_sha224_tv_template[2].digest, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					hmac_sha224_tv_template[2].digest = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 9:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(hmac_sha256_tv_template[0].digest, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					hmac_sha256_tv_template[0].digest = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 10:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(hmac_sha384_tv_template[1].digest, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					hmac_sha384_tv_template[1].digest = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 11:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(hmac_sha512_tv_template[0].digest, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					hmac_sha512_tv_template[0].digest = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 12:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(rsa_tv_template[0].c, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					rsa_tv_template[0].c = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 13:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(pkcs1pad_rsa_tv_template[0].c, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					pkcs1pad_rsa_tv_template[0].c = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 14:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(drbg_pr_ctr_aes128_tv_template[0].expected, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					drbg_pr_ctr_aes128_tv_template[0].expected = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 15:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(drbg_pr_hmac_sha256_tv_template[0].expected, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					drbg_pr_hmac_sha256_tv_template[0].expected = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 16:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(drbg_nopr_ctr_aes256_tv_template[0].expected, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					drbg_nopr_ctr_aes256_tv_template[0].expected = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 17:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(drbg_nopr_hmac_sha256_tv_template[0].expected, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					drbg_nopr_hmac_sha256_tv_template[0].expected = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+			case 18:
+				if (!strcmp (alg, alg_list[kat_testbuild-1])) {
+					result = kstrdup(ecdh_tv_template[0].expected_ss, GFP_KERNEL);
+					memcpy(result, test, strlen(test));
+					ecdh_tv_template[0].expected_ss = kstrdup(result, GFP_KERNEL);
+				}
+				break;
+		}
+	}
 	rc = 0;
 	if (i >= 0)
 		rc |= alg_test_descs[i].test(alg_test_descs + i, driver,
@@ -3716,6 +3862,11 @@ int alg_test(const char *driver, const char *alg, u32 type, u32 mask)
 		rc |= alg_test_descs[j].test(alg_test_descs + j, driver,
 					     type, mask);
 
+	if (result)
+	{
+		kfree(result);
+	}
+
 test_done:
 	if (fips_enabled && rc)
 		panic("%s: %s alg self test failed in fips mode!\n", driver, alg);
diff --git a/crypto/testmgr.h b/crypto/testmgr.h
index 74e1454..02d8aeb 100644
--- a/crypto/testmgr.h
+++ b/crypto/testmgr.h
@@ -154,7 +154,7 @@ static const char zeroed_string[48];
 /*
  * RSA test vectors. Borrowed from openSSL.
  */
-static const struct akcipher_testvec rsa_tv_template[] = {
+static struct akcipher_testvec rsa_tv_template[] = {
 	{
 #ifndef CONFIG_CRYPTO_FIPS
 	.key =
@@ -544,7 +544,7 @@ static const struct akcipher_testvec rsa_tv_template[] = {
 /*
  * PKCS#1 RSA test vectors. Obtained from CAVS testing.
  */
-static const struct akcipher_testvec pkcs1pad_rsa_tv_template[] = {
+static struct akcipher_testvec pkcs1pad_rsa_tv_template[] = {
 	{
 	.key =
 	"\x30\x82\x03\x1f\x02\x01\x00\x02\x82\x01\x01\x00\xd7\x1e\x77\x82"
@@ -857,7 +857,7 @@ static const struct kpp_testvec dh_tv_template[] = {
 	}
 };
 
-static const struct kpp_testvec ecdh_tv_template[] = {
+static struct kpp_testvec ecdh_tv_template[] = {
 	{
 #ifndef CONFIG_CRYPTO_FIPS
 	.secret =
@@ -4031,7 +4031,7 @@ static const struct hash_testvec hmac_rmd160_tv_template[] = {
 /*
  * HMAC-SHA1 test vectors from RFC2202
  */
-static const struct hash_testvec hmac_sha1_tv_template[] = {
+static struct hash_testvec hmac_sha1_tv_template[] = {
 	{
 		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
 		.ksize	= 20,
@@ -4112,7 +4112,7 @@ static const struct hash_testvec hmac_sha1_tv_template[] = {
 /*
  * SHA224 HMAC test vectors from RFC4231
  */
-static const struct hash_testvec hmac_sha224_tv_template[] = {
+static struct hash_testvec hmac_sha224_tv_template[] = {
 	{
 		.key    = "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
 			"\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
@@ -4225,7 +4225,7 @@ static const struct hash_testvec hmac_sha224_tv_template[] = {
  * HMAC-SHA256 test vectors from
  * draft-ietf-ipsec-ciph-sha-256-01.txt
  */
-static const struct hash_testvec hmac_sha256_tv_template[] = {
+static struct hash_testvec hmac_sha256_tv_template[] = {
 	{
 		.key	= "\x01\x02\x03\x04\x05\x06\x07\x08"
 			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
@@ -4766,7 +4766,7 @@ static const struct hash_testvec vmac64_aes_tv_template[] = {
  * SHA384 HMAC test vectors from RFC4231
  */
 
-static const struct hash_testvec hmac_sha384_tv_template[] = {
+static struct hash_testvec hmac_sha384_tv_template[] = {
 	{
 		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
 			  "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
@@ -4864,7 +4864,7 @@ static const struct hash_testvec hmac_sha384_tv_template[] = {
  * SHA512 HMAC test vectors from RFC4231
  */
 
-static const struct hash_testvec hmac_sha512_tv_template[] = {
+static struct hash_testvec hmac_sha512_tv_template[] = {
 	{
 		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
 			  "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
@@ -6090,7 +6090,7 @@ static const struct cipher_testvec des_ctr_tv_template[] = {
 	},
 };
 
-static const struct cipher_testvec des3_ede_tv_template[] = {
+static struct cipher_testvec des3_ede_tv_template[] = {
 	{ /* These are from openssl */
 		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef"
 			  "\x55\x55\x55\x55\x55\x55\x55\x55"
@@ -6251,7 +6251,7 @@ static const struct cipher_testvec des3_ede_tv_template[] = {
 	},
 };
 
-static const struct cipher_testvec des3_ede_cbc_tv_template[] = {
+static struct cipher_testvec des3_ede_cbc_tv_template[] = {
 	{ /* Generated from openssl */
 		.key	= "\xE9\xC0\xFF\x2E\x76\x0B\x64\x24"
 			  "\x44\x4D\x99\x5A\x12\xD6\x40\xC0"
@@ -11000,7 +11000,7 @@ static const struct cipher_testvec cast6_xts_tv_template[] = {
 /*
  * AES test vectors.
  */
-static const struct cipher_testvec aes_tv_template[] = {
+static struct cipher_testvec aes_tv_template[] = {
 	{ /* From FIPS-197 */
 		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
 			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
@@ -11168,7 +11168,7 @@ static const struct cipher_testvec aes_tv_template[] = {
 	},
 };
 
-static const struct cipher_testvec aes_cbc_tv_template[] = {
+static struct cipher_testvec aes_cbc_tv_template[] = {
 	{ /* From RFC 3602 */
 		.key    = "\x06\xa9\x21\x40\x36\xb8\xa1\x5b"
 			  "\x51\x2e\x03\xd5\x34\x12\x00\x06",
@@ -13434,7 +13434,7 @@ static const struct cipher_testvec aes_lrw_tv_template[] = {
 	}
 };
 
-static const struct cipher_testvec aes_xts_tv_template[] = {
+static struct cipher_testvec aes_xts_tv_template[] = {
 	/* http://grouper.ieee.org/groups/1619/email/pdf00086.pdf */
 	{ /* XTS-AES 1 */
 		.key    = "\x00\x00\x00\x00\x00\x00\x00\x00"
@@ -13772,7 +13772,7 @@ static const struct cipher_testvec aes_xts_tv_template[] = {
 	}
 };
 
-static const struct cipher_testvec aes_ctr_tv_template[] = {
+static struct cipher_testvec aes_ctr_tv_template[] = {
 	{ /* From NIST Special Publication 800-38A, Appendix F.5 */
 		.key	= "\x2b\x7e\x15\x16\x28\xae\xd2\xa6"
 			  "\xab\xf7\x15\x88\x09\xcf\x4f\x3c",
@@ -25773,7 +25773,7 @@ static const struct drbg_testvec drbg_pr_sha256_tv_template[] = {
 	},
 };
 
-static const struct drbg_testvec drbg_pr_hmac_sha256_tv_template[] = {
+static struct drbg_testvec drbg_pr_hmac_sha256_tv_template[] = {
 	{
 		.entropy = (unsigned char *)
 			"\x99\x69\xe5\x4b\x47\x03\xff\x31\x78\x5b\x87\x9a"
@@ -25931,7 +25931,7 @@ static const struct drbg_testvec drbg_pr_hmac_sha256_tv_template[] = {
 	},
 };
 
-static const struct drbg_testvec drbg_pr_ctr_aes128_tv_template[] = {
+static struct drbg_testvec drbg_pr_ctr_aes128_tv_template[] = {
 	{
 		.entropy = (unsigned char *)
 			"\xd1\x44\xc6\x61\x81\x6d\xca\x9d\x15\x28\x8a\x42"
@@ -26177,7 +26177,7 @@ static const struct drbg_testvec drbg_nopr_sha256_tv_template[] = {
 	},
 };
 
-static const struct drbg_testvec drbg_nopr_hmac_sha256_tv_template[] = {
+static struct drbg_testvec drbg_nopr_hmac_sha256_tv_template[] = {
 	{
 		.entropy = (unsigned char *)
 			"\xca\x85\x19\x11\x34\x93\x84\xbf\xfe\x89\xde\x1c"
@@ -26323,7 +26323,7 @@ static const struct drbg_testvec drbg_nopr_ctr_aes192_tv_template[] = {
 	},
 };
 
-static const struct drbg_testvec drbg_nopr_ctr_aes256_tv_template[] = {
+static struct drbg_testvec drbg_nopr_ctr_aes256_tv_template[] = {
 	{
 		.entropy = (unsigned char *)
 			"\x36\x40\x19\x40\xfa\x8b\x1f\xba\x91\xa1\x66\x1f"
