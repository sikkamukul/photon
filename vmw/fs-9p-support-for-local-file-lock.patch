From 1a0e2789040396f9b9f24473e6af16400dd151d6 Mon Sep 17 00:00:00 2001
From: Alexey Makhalov <amakhalov@vmware.com>
Date: Fri, 22 May 2020 05:16:15 +0000
Subject: [PATCH] fs/9p: support for local file lock

Implementation of the local lock only from the perspective
of current kernel. Can be used to speedup performance when
the client has monopoly access to server resource or/and
where 9p server does not support file locking.
Can be enabled by "local_lock" mount options.
---
 Documentation/filesystems/9p.txt |  3 +++
 fs/9p/v9fs.c                     |  7 +++++++
 fs/9p/v9fs.h                     |  3 ++-
 fs/9p/vfs_file.c                 | 11 +++++++++--
 4 files changed, 21 insertions(+), 3 deletions(-)

diff --git a/Documentation/filesystems/9p.txt b/Documentation/filesystems/9p.txt
index ba52790e1eca..316f30cf5907 100644
--- a/Documentation/filesystems/9p.txt
+++ b/Documentation/filesystems/9p.txt
@@ -136,6 +136,9 @@ OPTIONS
 		cache tags for existing cache sessions can be listed at
 		/sys/fs/9p/caches. (applies only to cache=fscache)
 
+  local_lock	Use only local posix locking from the perspective of "this"
+		kernel. Do not perform server side locking.
+
 RESOURCES
 =========
 
diff --git a/fs/9p/v9fs.c b/fs/9p/v9fs.c
index 445c13a7aebf..9fdbd15a57b0 100644
--- a/fs/9p/v9fs.c
+++ b/fs/9p/v9fs.c
@@ -63,6 +63,8 @@ enum {
 	Opt_access, Opt_posixacl,
 	/* Lock timeout option */
 	Opt_locktimeout,
+	/* Local lock */
+	Opt_local_lock,
 	/* Error token */
 	Opt_err
 };
@@ -84,6 +86,7 @@ static const match_table_t tokens = {
 	{Opt_access, "access=%s"},
 	{Opt_posixacl, "posixacl"},
 	{Opt_locktimeout, "locktimeout=%u"},
+	{Opt_local_lock, "local_lock"},
 	{Opt_err, NULL}
 };
 
@@ -395,6 +398,10 @@ static int v9fs_parse_options(struct v9fs_session_info *v9ses, char *opts)
 			v9ses->session_lock_timeout = (long)option * HZ;
 			break;
 
+		case Opt_local_lock:
+			v9ses->flags |= V9FS_LOCAL_LOCK;
+			break;
+
 		default:
 			continue;
 		}
diff --git a/fs/9p/v9fs.h b/fs/9p/v9fs.h
index 5cbdc2f5e5f5..bd537a11d3ab 100644
--- a/fs/9p/v9fs.h
+++ b/fs/9p/v9fs.h
@@ -50,7 +50,8 @@ enum p9_session_flags {
 	V9FS_ACCESS_SINGLE	= 0x04,
 	V9FS_ACCESS_USER	= 0x08,
 	V9FS_ACCESS_CLIENT	= 0x10,
-	V9FS_POSIX_ACL		= 0x20
+	V9FS_POSIX_ACL		= 0x20,
+	V9FS_LOCAL_LOCK		= 0x40
 };
 
 /* possible values of ->cache */
diff --git a/fs/9p/vfs_file.c b/fs/9p/vfs_file.c
index ba5863e5d33c..98345204fe9d 100644
--- a/fs/9p/vfs_file.c
+++ b/fs/9p/vfs_file.c
@@ -166,6 +166,10 @@ static int v9fs_file_do_lock(struct file *filp, int cmd, struct file_lock *fl)
 	if (res < 0)
 		goto out;
 
+	v9ses = v9fs_inode2v9ses(file_inode(filp));
+	if (v9ses->flags & V9FS_LOCAL_LOCK)
+		goto out;
+
 	/* convert posix lock to p9 tlock args */
 	memset(&flock, 0, sizeof(flock));
 	/* map the lock type */
@@ -190,8 +194,6 @@ static int v9fs_file_do_lock(struct file *filp, int cmd, struct file_lock *fl)
 	if (IS_SETLKW(cmd))
 		flock.flags = P9_LOCK_FLAGS_BLOCK;
 
-	v9ses = v9fs_inode2v9ses(file_inode(filp));
-
 	/*
 	 * if its a blocked request and we get P9_LOCK_BLOCKED as the status
 	 * for lock request, keep on trying
@@ -257,6 +259,7 @@ static int v9fs_file_getlock(struct file *filp, struct file_lock *fl)
 {
 	struct p9_getlock glock;
 	struct p9_fid *fid;
+	struct v9fs_session_info *v9ses;
 	int res = 0;
 
 	fid = filp->private_data;
@@ -270,6 +273,10 @@ static int v9fs_file_getlock(struct file *filp, struct file_lock *fl)
 	if (fl->fl_type != F_UNLCK)
 		return res;
 
+	v9ses = v9fs_inode2v9ses(file_inode(filp));
+	if (v9ses->flags & V9FS_LOCAL_LOCK)
+		return res;
+
 	/* convert posix lock to p9 tgetlock args */
 	memset(&glock, 0, sizeof(glock));
 	glock.type  = P9_LOCK_TYPE_UNLCK;
-- 
2.14.2

