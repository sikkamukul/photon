From 7ae5964a2b290ae07ff08c706fd6ca249371a05f Mon Sep 17 00:00:00 2001
From: Keerthana K <keerthanak@vmware.com>
Date: Tue, 20 Jul 2021 04:07:16 +0000
Subject: [PATCH 2/4] arm64, hyper: implement VMware hypervisor features

Implement hypervisor type detection framework for the arm64
architecture, enabled with the HYPERVISOR_GUEST config option.

Add VMware hypervisor detection code, using device tree via the
/hypervisor/compatible node or via DMI serial string signature.

Add kmsg_dumper feature, which dumps kmsg to vmware.log incase of
kernel panic in guest.

Signed-off-by: Cyprien Laplace <claplace@vmware.com>
Signed-off-by: Keerthana K <keerthanak@vmware.com>
---
 MAINTAINERS                         |   9 +
 arch/arm64/Kconfig                  |  10 ++
 arch/arm64/include/asm/hypervisor.h |  24 +++
 arch/arm64/include/asm/vmware.h     |  51 ++++++
 arch/arm64/kernel/Makefile          |   1 +
 arch/arm64/kernel/hypervisor.c      |  51 ++++++
 arch/arm64/kernel/vmware.c          | 269 ++++++++++++++++++++++++++++
 7 files changed, 415 insertions(+)
 create mode 100644 arch/arm64/include/asm/vmware.h
 create mode 100644 arch/arm64/kernel/hypervisor.c
 create mode 100644 arch/arm64/kernel/vmware.c

diff --git a/MAINTAINERS b/MAINTAINERS
index 9cd6686ff..1e960356d 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -18728,6 +18728,15 @@ S:	Supported
 F:	arch/x86/include/asm/vmware.h
 F:	arch/x86/kernel/cpu/vmware.c
 
+VMWARE ARM64 HYPERVISOR INTERFACE
+M:	Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>
+M:	Keerthana K <keerthanak@vmware.com>
+M:	"VMware, Inc." <pv-drivers@vmware.com>
+L:	virtualization@lists.linux-foundation.org
+F:	arch/arm64/include/asm/hypervisor.h
+F:	arch/arm64/kernel/hypervisor.c
+F:	arch/arm64/kernel/vmware.c
+
 VMWARE PVRDMA DRIVER
 M:	Adit Ranadive <aditr@vmware.com>
 M:	VMware PV-Drivers <pv-drivers@vmware.com>
diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index a6b5b7ef4..8c2ae491f 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -1136,6 +1136,16 @@ config CRASH_DUMP
 
 	  For more details see Documentation/admin-guide/kdump/kdump.rst
 
+menuconfig HYPERVISOR_GUEST
+	bool "Linux guest support"
+	help
+	  Say Y here to enable options for running Linux under various hyper-
+	  visors. This option enables basic hypervisor detection and platform
+	  setup.
+
+	  If you say N, all options in this submenu will be skipped and
+	  disabled, and Linux guest support won't be built in.
+
 config XEN_DOM0
 	def_bool y
 	depends on XEN
diff --git a/arch/arm64/include/asm/hypervisor.h b/arch/arm64/include/asm/hypervisor.h
index f9cc1d021..58d3529e7 100644
--- a/arch/arm64/include/asm/hypervisor.h
+++ b/arch/arm64/include/asm/hypervisor.h
@@ -4,4 +4,28 @@
 
 #include <asm/xen/hypervisor.h>
 
+#ifdef CONFIG_HYPERVISOR_GUEST
+
+#include <linux/hypervisor.h>
+
+struct arm64_hyper_init {
+	void (*init_platform)(void);
+};
+
+struct hypervisor_arm64 {
+	/* Hypervisor name */
+	const char	*name;
+
+	/* Detection routine - returns a priority (highest wins) */
+	uint32_t	(*detect)(void);
+
+	/* Hypervisor type */
+	enum arch_hypervisor_type type;
+
+	/* init time callbacks */
+	struct arm64_hyper_init init;
+};
+
+extern const struct hypervisor_arm64 arm64_hyper_vmware;
+#endif /* CONFIG_HYPERVISOR_GUEST */
 #endif
diff --git a/arch/arm64/include/asm/vmware.h b/arch/arm64/include/asm/vmware.h
new file mode 100644
index 000000000..834986a2c
--- /dev/null
+++ b/arch/arm64/include/asm/vmware.h
@@ -0,0 +1,51 @@
+/* SPDX-License-Identifier: GPL-2.0 or MIT */
+/*
+ * Copyright (C) 2021, VMware, Inc.
+ * Author : Cyprien Laplace <claplace@vmware.com>
+ */
+#ifndef _ASM_ARM64_VMWARE_H
+#define _ASM_ARM64_VMWARE_H
+
+#include <asm/memory.h>
+
+/*
+ * Encoding for virtual I/O port translation: HVC 0x86 allows efficient
+ * drop-in replacement for x86 [REP] IN/INS/OUT/OUTS instructions used
+ * for backdoors and virtual devices.
+ */
+#define X86_IO_MAGIC          0x86
+/*
+ * Transfer size, bits [1:0]
+ *    00: 1 byte
+ *    01: 2 bytes
+ *    10: 4 bytes
+ *    11: Invalid value
+ */
+#define X86_IO_W7_SIZE_SHIFT  0
+/*
+ * Transfer direction, bit [2]
+ *    0: Write (OUT/OUTS/REP OUTS instructions)
+ *    1: Read (IN/INS/REP INS instructions)
+ */
+#define X86_IO_W7_DIR         BIT(2)
+/*
+ * Instruction type, bits [4:3]
+ *    00: Non-string instruction (IN/OUT) without DX register
+ *        The port address (8-bit immediate) is set in W7<12:5>.
+ *
+ *    01: Non-string instruction (IN/OUT) with DX register
+ *
+ *    10: String instruction without REP prefix (INS/OUTS)
+ *        The direction flag (EFLAGS.DF) is set in W7<5>.
+ *
+ *    11: String instruction with REP prefix (REP INS/REP OUTS)
+ *        The direction flag (EFLAGS.DF) is set in W7<5>.
+ */
+#define X86_IO_W7_WITH        BIT(3)
+#define X86_IO_W7_STR         BIT(4)
+
+#define VMWARE_HYPERVISOR_PORT    0x5658
+#define VMWARE_HYPERVISOR_PORT_HB 0x5659
+#define VMWARE_HYPERVISOR_MAGIC 0x564D5868
+
+#endif /* _ASM_ARM64_VMWARE_H */
diff --git a/arch/arm64/kernel/Makefile b/arch/arm64/kernel/Makefile
index bbaf0bc4a..1efd58857 100644
--- a/arch/arm64/kernel/Makefile
+++ b/arch/arm64/kernel/Makefile
@@ -60,6 +60,7 @@ obj-$(CONFIG_ARM_SDE_INTERFACE)		+= sdei.o
 obj-$(CONFIG_ARM64_PTR_AUTH)		+= pointer_auth.o
 obj-$(CONFIG_SHADOW_CALL_STACK)		+= scs.o
 obj-$(CONFIG_ARM64_MTE)			+= mte.o
+obj-$(CONFIG_HYPERVISOR_GUEST)		+= hypervisor.o vmware.o
 
 obj-y					+= vdso/ probes/
 obj-$(CONFIG_COMPAT_VDSO)		+= vdso32/
diff --git a/arch/arm64/kernel/hypervisor.c b/arch/arm64/kernel/hypervisor.c
new file mode 100644
index 000000000..20b1558f9
--- /dev/null
+++ b/arch/arm64/kernel/hypervisor.c
@@ -0,0 +1,51 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Common hypervisor code
+ *
+ * Copyright (C) 2021, VMware, Inc.
+ */
+
+#include <linux/init.h>
+#include <linux/export.h>
+#include <asm/hypervisor.h>
+
+static const __initconst struct hypervisor_arm64 * const hypervisors[] = {
+	&arm64_hyper_vmware,
+};
+
+enum arch_hypervisor_type hyper_type;
+EXPORT_SYMBOL(hyper_type);
+
+static inline const struct hypervisor_arm64 * __init
+detect_hypervisor_vendor(void)
+{
+	const struct hypervisor_arm64 *h = NULL, * const *p;
+	u32 pri, max_pri = 0;
+
+	for (p = hypervisors; p < hypervisors + ARRAY_SIZE(hypervisors); p++) {
+		pri = (*p)->detect();
+		if (pri > max_pri) {
+			max_pri = pri;
+			h = *p;
+		}
+	}
+
+	if (h)
+		pr_info("Hypervisor detected: %s\n", h->name);
+
+	return h;
+}
+
+static int __init init_hypervisor_platform(void)
+{
+	const struct hypervisor_arm64 *h;
+
+	h = detect_hypervisor_vendor();
+
+	if (h)
+		hyper_type = h->type;
+
+	h->init.init_platform();
+	return 0;
+}
+arch_initcall(init_hypervisor_platform);
diff --git a/arch/arm64/kernel/vmware.c b/arch/arm64/kernel/vmware.c
new file mode 100644
index 000000000..22c37d3d9
--- /dev/null
+++ b/arch/arm64/kernel/vmware.c
@@ -0,0 +1,269 @@
+// SPDX-License-Identifier: GPL-2.0 or MIT
+/*
+ * VMware Detection code.
+ *
+ * Copyright (C) 2021, VMware, Inc.
+ * Author : Cyprien Laplace <claplace@vmware.com>
+ * Author : Keerthana K <keerthanak@vmware.com>
+ */
+
+#include <linux/init.h>
+#include <linux/export.h>
+#include <linux/dmi.h>
+#include <linux/of.h>
+#include <linux/of_fdt.h>
+#include <linux/kmsg_dump.h>
+
+#include <asm/hypervisor.h>
+#include <asm/vmware.h>
+
+#undef pr_fmt
+#define pr_fmt(fmt)	"vmware: " fmt
+
+#define MESSAGE_STATUS_SUCCESS  (0x01 << 16)
+#define MESSAGE_STATUS_CPT      (0x10 << 16)
+#define MESSAGE_STATUS_HB       (0x80 << 16)
+#define MESSAGE_TYPE_OPEN       (0 << 16)
+#define MESSAGE_TYPE_SENDSIZE   (1 << 16)
+#define MESSAGE_TYPE_SEND       (2 << 16)
+#define MESSAGE_TYPE_CLOSE      (6 << 16)
+#define VMWARE_HB_CMD_MSGST_SUCCESS \
+	(VMWARE_HB_CMD_MESSAGE | MESSAGE_STATUS_SUCCESS)
+
+#define VMWARE_CMD_MSG_OPEN \
+	(VMWARE_CMD_MESSAGE | MESSAGE_TYPE_OPEN)
+#define VMWARE_CMD_MSG_SENDSIZE \
+	(VMWARE_CMD_MESSAGE | MESSAGE_TYPE_SENDSIZE)
+#define VMWARE_CMD_MSG_SEND \
+	(VMWARE_CMD_MESSAGE | MESSAGE_TYPE_SEND)
+#define VMWARE_CMD_MSG_CLOSE \
+	(VMWARE_CMD_MESSAGE | MESSAGE_TYPE_CLOSE)
+#define VMWARE_CMD_GETHZ         45
+#define VMWARE_CMD_MESSAGE       30
+#define VMWARE_CMD_GETVERSION    10
+#define VMWARE_HB_CMD_MESSAGE    0
+
+#define RPCI_PROTOCOL_NUM       0x49435052 /* 'RPCI' */
+#define GUESTMSG_FLAG_COOKIE    0x80000000
+
+struct vmw_msg {
+	uint32_t id;
+	uint32_t cookie_high;
+	uint32_t cookie_low;
+};
+
+static int vmware_log_open(struct vmw_msg *msg)
+{
+	register uint64_t x0 asm("x0") = VMWARE_HYPERVISOR_MAGIC;
+	register uint64_t x1 asm("x1") = RPCI_PROTOCOL_NUM | GUESTMSG_FLAG_COOKIE;
+	register uint32_t w2 asm("w2") = VMWARE_CMD_MSG_OPEN;
+	register uint32_t w3 asm("w3") = VMWARE_HYPERVISOR_PORT;
+	register uint32_t w4 asm("w4") = 0;
+	register uint32_t w5 asm("w5") = 0;
+	register uint32_t w7 asm("w7") = X86_IO_W7_WITH |
+					 X86_IO_W7_DIR |
+					 2 << X86_IO_W7_SIZE_SHIFT;
+	uint32_t result = 0;
+
+	__asm__ __volatile__ ("hvc %[magic]" :
+			      "+r" (x0),
+			      "+r" (w2),
+			      "+r" (w3),
+			      "+r" (w4),
+			      "+r" (w5) :
+			      "r"  (x1),
+			      "r"  (w7),
+			      [magic] "i"  (X86_IO_MAGIC) :
+			      "memory");
+	result = w2;
+	msg->id = w3;
+	msg->cookie_high = w4;
+	msg->cookie_low = w5;
+
+	if (!(result & MESSAGE_STATUS_SUCCESS))
+		return 1;
+	return 0;
+}
+
+static int vmware_log_close(struct vmw_msg *msg)
+{
+	register uint64_t x0 asm("x0") = VMWARE_HYPERVISOR_MAGIC;
+	register uint64_t x1 asm("x1") = 0;
+	register uint32_t w2 asm("w2") = VMWARE_CMD_MSG_CLOSE;
+	register uint32_t w3 asm("w3") = VMWARE_HYPERVISOR_PORT | msg->id;
+	register uint32_t w4 asm("w4") = msg->cookie_high;
+	register uint32_t w5 asm("w5") = msg->cookie_low;
+	register uint32_t w7 asm("w7") = X86_IO_W7_WITH |
+					 X86_IO_W7_DIR |
+					 2 << X86_IO_W7_SIZE_SHIFT;
+	uint32_t result = 0;
+
+	__asm__ __volatile__ ("hvc %[magic]" :
+			      "+r" (x0),
+			      "+r" (w2) :
+			      "r"  (w3),
+			      "r"  (w4),
+			      "r"  (w5),
+			      "r"  (x1),
+			      "r"  (w7),
+			      [magic] "i"  (X86_IO_MAGIC) :
+			      "memory");
+
+	result = w2;
+	if (!(result & MESSAGE_STATUS_SUCCESS))
+		return 1;
+	return 0;
+}
+
+static inline uint64_t vmware_lb_cmd_msg_send(uint64_t cmd, uint64_t str,
+				struct vmw_msg *msg)
+{
+	register uint64_t x0 asm("x0") = VMWARE_HYPERVISOR_MAGIC;
+	register uint64_t x1 asm("x1") = str;
+	register uint64_t x2 asm("x2") = cmd;
+	register uint32_t w3 asm("w3") = VMWARE_HYPERVISOR_PORT |
+					 msg->id;
+	register uint64_t x4 asm("x4") = msg->cookie_high;
+	register uint32_t w5 asm("w5") = msg->cookie_low;
+	register uint32_t w7 asm("w7") = X86_IO_W7_WITH |
+					 X86_IO_W7_DIR |
+					 2 << X86_IO_W7_SIZE_SHIFT;
+	uint64_t ret = 0;
+
+	__asm__ __volatile__ ("hvc %[magic]" :
+			      "+r" (x0),
+			      "+r" (x2) :
+			      "r"  (w3),
+			      "r"  (x4),
+			      "r"  (w5),
+			      "r"  (x1),
+			      "r"  (w7),
+			      [magic] "i"  (X86_IO_MAGIC) :
+			      "memory");
+	ret = x2;
+	return ret;
+}
+
+static inline uint64_t vmware_hb_cmd_msg_send(uint64_t cmd, uint64_t str,
+				uint64_t len, struct vmw_msg *msg)
+{
+	register uint64_t x0 asm("x0") = VMWARE_HYPERVISOR_MAGIC;
+	register uint32_t w1 asm("w1") = cmd;
+	register uint64_t x2 asm("x2") = len;
+	register uint32_t w3 asm("w3") = VMWARE_HYPERVISOR_PORT_HB |
+					 msg->id;
+	register uint64_t x4 asm("x4") = str;
+	register uint32_t w5 asm("w5") = msg->cookie_low;
+	register uint32_t w6 asm("w6") = msg->cookie_high;
+	register uint32_t w7 asm("w7") = X86_IO_W7_WITH |
+					 X86_IO_W7_STR;
+	uint64_t ret = 0;
+
+	__asm__ __volatile__ ("hvc %[magic]" :
+			      "+r" (x0),
+			      "+r" (w1) :
+			      "r"  (x2),
+			      "r"  (x4),
+			      "r"  (w3),
+			      "r"  (w5),
+			      "r"  (w6),
+			      "r"  (w7),
+			      [magic] "i" (X86_IO_MAGIC));
+	ret = w1;
+	return ret;
+}
+
+static int vmware_log_send(struct vmw_msg *msg, const char *log_str)
+{
+	uint64_t result = 0;
+	uint32_t str;
+	uint32_t len = strlen(log_str);
+	bool retry = 0;
+
+	do {
+		result = vmware_lb_cmd_msg_send(VMWARE_CMD_MSG_SENDSIZE,
+						len, msg);
+		if (!(result & MESSAGE_STATUS_SUCCESS))
+			return 1;
+		if (result & MESSAGE_STATUS_HB) {
+			result = vmware_hb_cmd_msg_send(VMWARE_HB_CMD_MSGST_SUCCESS,
+							(uint64_t) log_str, len, msg);
+		} else {
+			do {
+				size_t s = len > sizeof(str) ? sizeof(str) : len;
+
+				memcpy(&str, log_str, s);
+				len -= s;
+				log_str += s;
+
+				result = vmware_lb_cmd_msg_send(VMWARE_CMD_MSG_SEND,
+								str, msg);
+			} while (len && (result & MESSAGE_STATUS_SUCCESS));
+		}
+		if (!(result & MESSAGE_STATUS_SUCCESS)) {
+			if (result & MESSAGE_STATUS_CPT)
+				retry = 1;
+			return 1;
+		}
+	} while (retry);
+	return 0;
+}
+
+static void kmsg_dumper_vmware_log(struct kmsg_dumper *dumper,
+				enum kmsg_dump_reason reason);
+
+static struct kmsg_dumper kmsg_dumper = {
+	.dump = kmsg_dumper_vmware_log
+};
+
+static void kmsg_dumper_vmware_log(struct kmsg_dumper *dumper,
+				enum kmsg_dump_reason reason)
+{
+	struct vmw_msg msg;
+	char line[1024] = {'l', 'o', 'g', ' '};
+	int fail = 0;
+	size_t len = 0;
+
+	while (!fail && kmsg_dump_get_line(dumper, true,
+	       line + 4, sizeof(line) - 4, &len)) {
+		line[len + 4] = '\0';
+		if (vmware_log_open(&msg))
+			return;
+
+		fail = vmware_log_send(&msg, line);
+		vmware_log_close(&msg);
+	}
+}
+
+static void __init vmware_platform_setup(void)
+{
+	kmsg_dump_register(&kmsg_dumper);
+}
+
+static int __init fdt_find_hyper_node(unsigned long node,
+				      const char *uname,
+				      int depth, void *data)
+{
+	return depth == 1 && strcmp(uname, "hypervisor") == 0 &&
+	       of_flat_dt_is_compatible(node, "vmware");
+}
+
+/*
+ * Check for VMware hypervisor signature in the device tree node
+ * hypervisor/compatible or in dmi serial string.
+ */
+static uint32_t __init vmware_platform(void)
+{
+	if (of_scan_flat_dt(fdt_find_hyper_node, NULL) ||
+	     (dmi_available && dmi_name_in_serial("VMware")))
+		return 1;
+
+	return 0;
+}
+
+const __initconst struct hypervisor_arm64 arm64_hyper_vmware = {
+	.name			= "VMware",
+	.detect			= vmware_platform,
+	.type			= HYPER_VMWARE,
+	.init.init_platform	= vmware_platform_setup,
+};
-- 
2.28.0

