From 8ffe4b93b950bae866bc4ea9089408f5b8328d5b Mon Sep 17 00:00:00 2001
Message-Id: <8ffe4b93b950bae866bc4ea9089408f5b8328d5b.1588347332.git.zanussi@kernel.org>
In-Reply-To: <119971df8e4c3a8550b9b7479e5e409dc03f07b6.1588347332.git.zanussi@kernel.org>
References: <119971df8e4c3a8550b9b7479e5e409dc03f07b6.1588347332.git.zanussi@kernel.org>
From: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date: Tue, 26 Feb 2019 14:53:49 +0100
Subject: [PATCH 242/327] x86: lazy-preempt: use proper return label on
 32bit-x86

The lazy-preempt uses the wrong return label in case preemption isn't
possible. This results crash while returning to the kernel.

Use the correct return label if preemption isn' possible.

Reported-by: Andri Yngvason <andri@yngvason.is>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
---
 arch/x86/entry/entry_32.S | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/arch/x86/entry/entry_32.S b/arch/x86/entry/entry_32.S
index d44f446a0e74..56398b07211b 100644
--- a/arch/x86/entry/entry_32.S
+++ b/arch/x86/entry/entry_32.S
@@ -759,15 +759,15 @@ ENTRY(resume_kernel)
 
 	# atleast preempt count == 0 ?
 	cmpl $_PREEMPT_ENABLED,PER_CPU_VAR(__preempt_count)
-	jne restore_all
+	jne	restore_all_kernel
 
 	movl	PER_CPU_VAR(current_task), %ebp
 	cmpl	$0,TASK_TI_preempt_lazy_count(%ebp)	# non-zero preempt_lazy_count ?
-	jnz	restore_all
+	jnz	restore_all_kernel
 
 	testl	$_TIF_NEED_RESCHED_LAZY, TASK_TI_flags(%ebp)
-	jz	restore_all
-	test_int_off:
+	jz	restore_all_kernel
+test_int_off:
 #endif
 	testl	$X86_EFLAGS_IF, PT_EFLAGS(%esp)	# interrupts off (exception path) ?
 	jz	restore_all_kernel
-- 
2.17.1

