From 45091a04ba2778c2f133067384201961e0b03721 Mon Sep 17 00:00:00 2001
From: Keerthana K <keerthanak@vmware.com>
Date: Mon, 20 Dec 2021 14:25:41 +0000
Subject: [PATCH] crypto: kattest - break KAT fips intentionally

1. Modified Kernel crypto testmgr to break KAT fips tests for
   algorithms supported in photon.
2. Added a new module kattest to tamper the testmgr tests.
3. Added kernel cmdline parameter "katbuild". This parameter is used
   to break a particular algorithm in fips power on self tests.
   you can specify values [1,2,3...18]. each value corresponds to
   an algorithm for which the test vectors are tampered.
4. Extended test coverage for newly included algorithms LKCM 5.0

   * newly included algorithms: gcm, gcm-rfc4106, ccm, cfb, cts, cmac, ecdsa, sha3, hmac-sha3, and
     rsa-pkcs1pad (earlier missed out combinations)

   * kernel cmdline parameter "katbuild" now ranges from [1,2,3,...60]

Signed-off-by: Srish Srinivasan <ssrish@vmware.com>
---
 crypto/Kconfig   |  28 ++++++++++++
 crypto/Makefile  |   1 +
 crypto/kattest.c | 114 +++++++++++++++++++++++++++++++++++++++++++++++
 crypto/testmgr.c |  72 ++++++++++++++++++++++++++++++
 4 files changed, 215 insertions(+)
 create mode 100644 crypto/kattest.c

diff --git a/crypto/Kconfig b/crypto/Kconfig
index aa15d8ee0..d720dc794 100644
--- a/crypto/Kconfig
+++ b/crypto/Kconfig
@@ -250,6 +250,34 @@ config CRYPTO_SELF_TEST
 	help
 	  Crypto self test module for FIPS.
 
+config CRYPTO_BROKEN_KAT
+	bool "Broken Known Answer Test module"
+	select CRYPTO_MANAGER
+	select CRYPTO_FIPS
+	select CRYPTO_AES
+	select CRYPTO_CBC
+	select CRYPTO_ECB
+	select CRYPTO_CTR
+	select CRYPTO_XTS
+	select CRYPTO_HMAC
+	select CRYPTO_SHA256
+	select CRYPTO_SHA512
+	select CRYPTO_RSA
+	select CRYPTO_DRBG
+	select CRYPTO_ECDH
+	select CRYPTO_ECDSA
+	select CRYPTO_GCM
+	select CRYPTO_CCM
+	select CRYPTO_CFB
+	select CRYPTO_CTS
+	select CRYPTO_CMAC
+	select CRYPTO_SHA1
+	select CRYPTO_SHA256
+	select CRYPTO_SHA512
+	select CRYPTO_SHA3
+	help
+	  Crypto Broken Known Answer Test for FIPS testing
+
 config CRYPTO_SIMD
 	tristate
 	select CRYPTO_CRYPTD
diff --git a/crypto/Makefile b/crypto/Makefile
index b4d3850f2..875bf89e7 100644
--- a/crypto/Makefile
+++ b/crypto/Makefile
@@ -232,6 +232,7 @@ crypto/lib-crypto-%.o: lib/crypto/%.c $(recordmcount_source) $(objtool_dep) FORC
 	$(call if_changed_rule,cc_o_c)
 
 canister += crypto_self_test.o
+canister += kattest.o
 
 canister += fips_integrity.o
 
diff --git a/crypto/kattest.c b/crypto/kattest.c
new file mode 100644
index 000000000..e2a9eb893
--- /dev/null
+++ b/crypto/kattest.c
@@ -0,0 +1,114 @@
+/*
+ * kattest module
+ *
+ * Copyright (c) 2020 VMware
+ *
+ */
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/export.h>
+#include "fips_canister_wrapper.h"
+
+int kat_testbuild;
+/* Process kernel command-line parameter at boot time.
++ * katbuild=1 katbuild=2 etc
++ */
+static int kat_test(char *str)
+{
+	kat_testbuild = simple_strtol(str, NULL, 0);
+	fcw_printk(KERN_INFO "kat build : %d\n", kat_testbuild);
+	return 1;
+}
+
+__setup("katbuild=", kat_test);
+
+
+static const char * const alg_list[] = {
+	"cbc(aes)",
+	"ecb(aes)",
+	"xts(aes)",
+	"ctr(aes)",
+	"hmac(sha1)",
+	"hmac(sha224)",
+	"hmac(sha256)",
+	"hmac(sha384)",
+	"hmac(sha512)",
+	"rsa",
+	"pkcs1pad(rsa,sha1)",
+	"pkcs1pad(rsa,sha224)",
+	"pkcs1pad(rsa,sha256)",
+	"pkcs1pad(rsa,sha384)",
+	"pkcs1pad(rsa,sha512)",
+	"drbg_pr_ctr_aes128",
+	"drbg_pr_ctr_aes192",
+	"drbg_pr_ctr_aes256",
+	"drbg_pr_sha1",
+	"drbg_pr_sha256",
+	"drbg_pr_sha384",
+	"drbg_pr_sha512",
+	"drbg_pr_hmac_sha1",
+	"drbg_pr_hmac_sha256",
+	"drbg_pr_hmac_sha384",
+	"drbg_pr_hmac_sha512",
+	"drbg_nopr_ctr_aes128",
+	"drbg_nopr_ctr_aes192",
+	"drbg_nopr_ctr_aes256",
+	"drbg_nopr_sha1",
+	"drbg_nopr_sha256",
+	"drbg_nopr_sha384",
+	"drbg_nopr_sha512",
+	"drbg_nopr_hmac_sha1",
+	"drbg_nopr_hmac_sha256",
+	"drbg_nopr_hmac_sha384",
+	"drbg_nopr_hmac_sha512",
+	"ecdh-nist-p256",
+	"ecdh-nist-p384",
+	"ecdsa-nist-p256",
+	"ecdsa-nist-p384",
+	"gcm(aes)",
+	"rfc4106(gcm(aes))",
+	"ccm(aes)",
+	"cfb(aes)",
+	"cts(cbc(aes))",
+	"cmac(aes)",
+	"hmac(sha3-224)",
+	"hmac(sha3-256)",
+	"hmac(sha3-384)",
+	"hmac(sha3-512)",
+	"sha1",
+	"sha224",
+	"sha256",
+	"sha384",
+	"sha512",
+	"sha3-224",
+	"sha3-256",
+	"sha3-384",
+	"sha3-512",
+};
+
+void tamper_input_vector(const char *alg, const char *driver, const char *vector)
+{
+	int idx = kat_testbuild - 1;
+	char *test = "\x23\x32\x23\x32\x23\x32\x23\x32";
+
+	switch (kat_testbuild) {
+		case 1 ... 60:
+			if (strcmp(alg, alg_list[idx]) && strcmp(driver, alg_list[idx]))
+				break;
+
+			memcpy((char *)vector, test, strlen(test));
+			break;
+	}
+}
+
+static int __init kattest_init(void)
+{
+	fcw_printk(KERN_INFO "Kattest Init\n");
+	return 1;
+}
+
+static void __exit kattest_exit(void) {}
+
+subsys_initcall(kattest_init);
+module_exit(kattest_exit);
diff --git a/crypto/testmgr.c b/crypto/testmgr.c
index b505d0286..7f59f18a6 100644
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@ -39,11 +39,79 @@
 #include "fips_canister_wrapper.h"
 #include "fips_canister_wrapper_internal.h"
 
+#include "testmgr.h"
+
+extern int kat_testbuild;
+const char ** poison_alg_strs[] = {
+   (const char **)&aes_cbc_tv_template[2].ctext,
+   (const char **)&aes_tv_template[3].ctext,
+   (const char **)&aes_xts_tv_template[4].ctext,
+   (const char **)&aes_ctr_tv_template[2].ctext,
+   (const char **)&hmac_sha1_tv_template[0].digest,
+   (const char **)&hmac_sha224_tv_template[2].digest,
+   (const char **)&hmac_sha256_tv_template[0].digest,
+   (const char **)&hmac_sha384_tv_template[0].digest,
+   (const char **)&hmac_sha512_tv_template[0].digest,
+   (const char **)&rsa_tv_template[0].c,
+   (const char **)&pkcs1pad_rsa_sha1_tv_template[0].c,
+   (const char **)&pkcs1pad_rsa_sha224_tv_template[0].c,
+   (const char **)&pkcs1pad_rsa_tv_template[0].c,
+   (const char **)&pkcs1pad_rsa_sha384_tv_template[0].c,
+   (const char **)&pkcs1pad_rsa_sha512_tv_template[0].c,
+   (const char **)&drbg_pr_ctr_aes128_tv_template[0].expected,
+   (const char **)&drbg_pr_ctr_aes192_tv_template[0].expected,
+   (const char **)&drbg_pr_ctr_aes256_tv_template[0].expected,
+   (const char **)&drbg_pr_sha1_tv_template[0].expected,
+   (const char **)&drbg_pr_sha256_tv_template[0].expected,
+   (const char **)&drbg_pr_sha384_tv_template[0].expected,
+   (const char **)&drbg_pr_sha512_tv_template[0].expected,
+   (const char **)&drbg_pr_hmac_sha1_tv_template[0].expected,
+   (const char **)&drbg_pr_hmac_sha256_tv_template[0].expected,
+   (const char **)&drbg_pr_hmac_sha384_tv_template[0].expected,
+   (const char **)&drbg_pr_hmac_sha512_tv_template[0].expected,
+   (const char **)&drbg_nopr_ctr_aes128_tv_template[0].expected,
+   (const char **)&drbg_nopr_ctr_aes192_tv_template[0].expected,
+   (const char **)&drbg_nopr_ctr_aes256_tv_template[0].expected,
+   (const char **)&drbg_nopr_sha1_tv_template[0].expected,
+   (const char **)&drbg_nopr_sha256_tv_template[0].expected,
+   (const char **)&drbg_nopr_sha384_tv_template[0].expected,
+   (const char **)&drbg_nopr_sha512_tv_template[0].expected,
+   (const char **)&drbg_nopr_hmac_sha1_tv_template[0].expected,
+   (const char **)&drbg_nopr_hmac_sha256_tv_template[0].expected,
+   (const char **)&drbg_nopr_hmac_sha384_tv_template[0].expected,
+   (const char **)&drbg_nopr_hmac_sha512_tv_template[0].expected,
+   (const char **)&ecdh_p256_tv_template[0].expected_ss,
+   (const char **)&ecdh_p384_tv_template[0].expected_ss,
+   (const char **)&ecdsa_nist_p256_tv_template[0].c,
+   (const char **)&ecdsa_nist_p384_tv_template[0].c,
+   (const char **)&aes_gcm_tv_template[0].ctext,
+   (const char **)&aes_gcm_rfc4106_tv_template[0].ctext,
+   (const char **)&aes_ccm_tv_template[0].ctext,
+   (const char **)&aes_cfb_tv_template[0].ctext,
+   (const char **)&cts_mode_tv_template[0].ctext,
+   (const char **)&aes_cmac128_tv_template[0].digest,
+   (const char **)&hmac_sha3_224_tv_template[0].digest,
+   (const char **)&hmac_sha3_256_tv_template[0].digest,
+   (const char **)&hmac_sha3_384_tv_template[0].digest,
+   (const char **)&hmac_sha3_512_tv_template[0].digest,
+   (const char **)&sha1_tv_template[0].digest,
+   (const char **)&sha224_tv_template[0].digest,
+   (const char **)&sha256_tv_template[0].digest,
+   (const char **)&sha384_tv_template[0].digest,
+   (const char **)&sha512_tv_template[0].digest,
+   (const char **)&sha3_224_tv_template[0].digest,
+   (const char **)&sha3_256_tv_template[0].digest,
+   (const char **)&sha3_384_tv_template[0].digest,
+   (const char **)&sha3_512_tv_template[0].digest,
+};
+
 #ifdef CONFIG_CRYPTO_MANAGER_EXTRA_TESTS
 static bool noextratests;
 static unsigned int fuzz_iterations = 100;
 #endif
 
+extern void tamper_input_vector(const char *alg, const char *driver, const char *vector);
+
 #ifdef CONFIG_CRYPTO_MANAGER_DISABLE_TESTS
 
 /* a perfect nop */
@@ -5650,6 +5718,10 @@ int alg_test(const char *driver, const char *alg, u32 type, u32 mask)
 			goto non_fips_alg;
 	}
 
+	if (fips_enabled && kat_testbuild > 0 && kat_testbuild < 61) {
+		tamper_input_vector(alg, driver, *poison_alg_strs[kat_testbuild-1]);
+	}
+
 	rc = 0;
 	if (i >= 0)
 		rc |= alg_test_descs[i].test(alg_test_descs + i, driver,
-- 
2.35.6
