From f203942e75072b75ccde05a20bb1ba97716a7920 Mon Sep 17 00:00:00 2001
From: Bo Gan <ganb@vmware.com>
Date: Thu, 4 Jun 2020 03:51:08 -0700
Subject: [PATCH] crypto: testmgr - break KAT fips intentionally

1. Modified Kernel crypto testmgr to break KAT fips tests for
   algorithms supported in photon
2. Added kernel cmdline parameter "katbuild". This parameter is used
   to break a particular algorithm in fips power on self tests.
   you can specify values [1,2,3...19]. each value corresponds to
   an algorithm for which the test vectors are tampered.

Signed-off-by: Keerthana K <keerthanak@vmware.com>
Signed-off-by: Bo Gan <ganb@vmware.com>
---
 crypto/testmgr.c | 86 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 crypto/testmgr.h |  4 +++
 2 files changed, 90 insertions(+)

diff --git a/crypto/testmgr.c b/crypto/testmgr.c
index 7473c5b..a6867f9 100644
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@ -56,6 +56,20 @@ DEFINE_PER_CPU(bool, crypto_simd_disabled_for_test);
 EXPORT_PER_CPU_SYMBOL_GPL(crypto_simd_disabled_for_test);
 #endif
 
+int kat_testbuild;
+
+/* Process kernel command-line parameter at boot time.
+ * katbuild=1 katbuild=2 etc
+ */
+static int kat_test(char *str)
+{
+	kat_testbuild = simple_strtol(str, NULL, 0);
+	printk(KERN_INFO "kat build : %d\n", kat_testbuild);
+	return 1;
+}
+
+__setup("katbuild=", kat_test);
+
 #ifdef CONFIG_CRYPTO_MANAGER_DISABLE_TESTS
 
 /* a perfect nop */
@@ -5203,11 +5217,66 @@ static int alg_find_test(const char *alg)
 	return -1;
 }
 
+static inline void __poison_str(char *str)
+{
+	uint64_t pattern = 0x2332233223322332ULL;
+	size_t len = strlen(str);
+
+	while (len) {
+		size_t s = len > sizeof(pattern) ? sizeof(pattern) : len;
+
+		memcpy(str, &pattern, s);
+		str += s;
+		len -= s;
+	}
+}
+
 int alg_test(const char *driver, const char *alg, u32 type, u32 mask)
 {
 	int i;
 	int j;
 	int rc;
+	static const char * const alg_list[] = {
+		"cbc(aes)",
+		"ecb(aes)",
+		"xts(aes)",
+		"ctr(aes)",
+		"cbc(des3_ede)",
+		"ecb(des3_ede)",
+		"hmac(sha1)",
+		"hmac(sha224)",
+		"hmac(sha256)",
+		"hmac(sha384)",
+		"hmac(sha512)",
+		"rsa",
+		"pkcs1pad(rsa,sha256)",
+		"drbg_pr_ctr_aes128",
+		"drbg_pr_hmac_sha256",
+		"drbg_nopr_ctr_aes256",
+		"drbg_nopr_hmac_sha256",
+		"ecdh",
+	};
+	static const char ** const posion_alg_strs[] = {
+		&aes_cbc_tv_template[2].ctext,
+		&aes_tv_template[3].ctext,
+		&aes_xts_tv_template[4].ctext,
+		&aes_ctr_tv_template[2].ctext,
+		&des3_ede_cbc_tv_template[0].ctext,
+		&des3_ede_tv_template[0].ctext,
+		&hmac_sha1_tv_template[0].digest,
+		&hmac_sha224_tv_template[2].digest,
+		&hmac_sha256_tv_template[0].digest,
+		&hmac_sha384_tv_template[1].digest,
+		&hmac_sha512_tv_template[0].digest,
+		(const char **)&rsa_tv_template[0].c,
+		(const char **)&pkcs1pad_rsa_tv_template[0].c,
+		(const char **)&drbg_pr_ctr_aes128_tv_template[0].expected,
+		(const char **)&drbg_pr_hmac_sha256_tv_template[0].expected,
+		(const char **)&drbg_nopr_ctr_aes256_tv_template[0].expected,
+		(const char **)&drbg_nopr_hmac_sha256_tv_template[0].expected,
+		(const char **)&ecdh_tv_template[0].expected_ss,
+	};
+	char *poisoned_str = NULL;
 
 	if (!fips_enabled && notests) {
 		printk_once(KERN_INFO "alg: self-tests disabled\n");
@@ -5243,6 +5312,23 @@ int alg_test(const char *driver, const char *alg, u32 type, u32 mask)
 			     (j >= 0 && !alg_test_descs[j].fips_allowed)))
 		goto non_fips_alg;
 
+	if (fips_enabled) {
+		int idx = kat_testbuild - 1;
+
+		switch (kat_testbuild) {
+		case 1 ... 18:
+				if (strcmp(alg, alg_list[idx]))
+					break;
+				poisoned_str = kstrdup(*posion_alg_strs[idx],
+							GFP_KERNEL);
+				if (!poisoned_str)
+					return -ENOMEM;
+				__poison_str(poisoned_str);
+				*posion_alg_strs[idx] = poisoned_str;
+				break;
+		}
+	}
+
 	rc = 0;
 	if (i >= 0)
 		rc |= alg_test_descs[i].test(alg_test_descs + i, driver,
diff --git a/crypto/testmgr.h b/crypto/testmgr.h
index ef7d21f..a78939f 100644
--- a/crypto/testmgr.h
+++ b/crypto/testmgr.h
@@ -170,6 +170,8 @@ struct kpp_testvec {
 
 static const char zeroed_string[48];
 
+#define const
+
 /*
  * RSA test vectors. Borrowed from openSSL.
  */
@@ -31567,4 +31569,6 @@ static const struct aead_testvec essiv_hmac_sha256_aes_cbc_tv_temp[] = {
 	},
 };
 
+#undef const
+
 #endif	/* _CRYPTO_TESTMGR_H */
-- 
2.7.4

